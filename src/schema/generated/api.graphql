# source: http://localhost:4000
# timestamp: Thu Apr 11 2019 23:43:40 GMT+0300 (GMT+03:00)

type AggregateCallRequest {
  count: Int!
}

type AggregateChatMessage {
  count: Int!
}

type AggregateChatMessageReaded {
  count: Int!
}

type AggregateChatRoom {
  count: Int!
}

type AggregateChatRoomInvitation {
  count: Int!
}

type AggregateEthAccount {
  count: Int!
}

type AggregateEthContractSource {
  count: Int!
}

type AggregateEthTransaction {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLetsadsSmsMessageStatus {
  count: Int!
}

type AggregateLetsadsSmsMessageStatusItem {
  count: Int!
}

type AggregateLetter {
  count: Int!
}

type AggregateLog {
  count: Int!
}

type AggregateLogedIn {
  count: Int!
}

type AggregateNotice {
  count: Int!
}

type AggregateNotificationType {
  count: Int!
}

type AggregateResetPassword {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateResourceTag {
  count: Int!
}

type AggregateRoute {
  count: Int!
}

type AggregateSmsMessage {
  count: Int!
}

type AggregateSmsProvider {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserGroup {
  count: Int!
}

type AggregateVote {
  count: Int!
}

input AnswerInput {
  offer: Json
  answer: Json
  sdp: Json
}

type AuthPayload {
  success: Boolean!
  message: String
  errors: [Error!]!
  token: String
  data: User
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type CallRequest implements Node {
  id: ID!
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called(where: UserWhereInput): User!
  Caller(where: UserWhereInput): User
  Room(where: ChatRoomWhereInput): ChatRoom
}

"""A connection to a list of items."""
type CallRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CallRequestEdge]!
  aggregate: AggregateCallRequest!
}

input CallRequestCreateInput {
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserCreateOneInput!
  Caller: UserCreateOneInput
  Room: ChatRoomCreateOneWithoutCallRequestsInput
}

input CallRequestCreateManyWithoutRoomInput {
  connect: [CallRequestWhereUniqueInput!]
}

input CallRequestCreateWithoutRoomInput {
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserCreateOneInput!
  Caller: UserCreateOneInput
}

input CallRequestDataInput {
  status: CallRequestStatus
}

"""An edge in a connection."""
type CallRequestEdge {
  """The item at the end of the edge."""
  node: CallRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CallRequestOrderByInput {
  id_ASC
  id_DESC
  called_descriptions_ASC
  called_descriptions_DESC
  caller_descriptions_ASC
  caller_descriptions_DESC
  status_ASC
  status_DESC
  startedAt_ASC
  startedAt_DESC
  endedAt_ASC
  endedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CallRequestPreviousValues {
  id: ID!
  called_descriptions: Json!
  caller_descriptions: Json!
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
}

type CallRequestResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: CallRequest
}

enum CallRequestStatus {
  Created
  Rejected
  Accepted
  Started
  Canceled
  Missed
  Ended
  Error
  Billed
}

type CallRequestSubscriptionPayload {
  mutation: MutationType!
  node: CallRequest
  updatedFields: [String!]
  previousValues: CallRequestPreviousValues
}

input CallRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CallRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CallRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CallRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CallRequestWhereInput
}

input CallRequestUpdateDataInput {
  status: CallRequestStatus
  answer: AnswerInput
}

input CallRequestUpdateInput {
  called_descriptions: Json
  caller_descriptions: Json
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserUpdateOneInput
  Caller: UserUpdateOneInput
  Room: ChatRoomUpdateOneWithoutCallRequestsInput
}

input CallRequestUpdateManyWithoutRoomInput {
  connect: [CallRequestWhereUniqueInput!]
  disconnect: [CallRequestWhereUniqueInput!]
}

input CallRequestUpdateWithoutRoomDataInput {
  called_descriptions: Json
  caller_descriptions: Json
  status: CallRequestStatus
  startedAt: DateTime
  endedAt: DateTime
  Called: UserUpdateOneInput
  Caller: UserUpdateOneInput
}

input CallRequestUpdateWithWhereUniqueWithoutRoomInput {
  where: CallRequestWhereUniqueInput!
  data: CallRequestUpdateWithoutRoomDataInput!
}

input CallRequestUpsertWithWhereUniqueWithoutRoomInput {
  where: CallRequestWhereUniqueInput!
}

input CallRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [CallRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [CallRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CallRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: CallRequestStatus

  """All values that are not equal to given value."""
  status_not: CallRequestStatus

  """All values that are contained in given list."""
  status_in: [CallRequestStatus!]

  """All values that are not contained in given list."""
  status_not_in: [CallRequestStatus!]
  startedAt: DateTime

  """All values that are not equal to given value."""
  startedAt_not: DateTime

  """All values that are contained in given list."""
  startedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startedAt_not_in: [DateTime!]

  """All values less than the given value."""
  startedAt_lt: DateTime

  """All values less than or equal the given value."""
  startedAt_lte: DateTime

  """All values greater than the given value."""
  startedAt_gt: DateTime

  """All values greater than or equal the given value."""
  startedAt_gte: DateTime
  endedAt: DateTime

  """All values that are not equal to given value."""
  endedAt_not: DateTime

  """All values that are contained in given list."""
  endedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endedAt_not_in: [DateTime!]

  """All values less than the given value."""
  endedAt_lt: DateTime

  """All values less than or equal the given value."""
  endedAt_lte: DateTime

  """All values greater than the given value."""
  endedAt_gt: DateTime

  """All values greater than or equal the given value."""
  endedAt_gte: DateTime
  Called: UserWhereInput
  Caller: UserWhereInput
  Room: ChatRoomWhereInput
}

input CallRequestWhereUniqueInput {
  id: ID
}

type ChatMessage implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: Json
  contentText: String
  CreatedBy(where: UserWhereInput): User
  Room(where: ChatRoomWhereInput): ChatRoom!
  ReadedBy(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessageReaded!]
}

"""A connection to a list of items."""
type ChatMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatMessageEdge]!
  aggregate: AggregateChatMessage!
}

input ChatMessageCreateInput {
  content: Json
  Room: ChatRoomCreateOneWithoutMessagesInput!
}

input ChatMessageCreateManyWithoutCreatedByInput {
  connect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageCreateManyWithoutRoomInput {
  connect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageCreateOneInput {
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageCreateOneWithoutReadedByInput {
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageCreateWithoutCreatedByInput {
  content: Json
  contentText: String
  Room: ChatRoomCreateOneWithoutMessagesInput!
  ReadedBy: ChatMessageReadedCreateManyWithoutMessageInput
}

input ChatMessageCreateWithoutReadedByInput {
  content: Json
  contentText: String
  CreatedBy: UserCreateOneWithoutMessagesInput
  Room: ChatRoomCreateOneWithoutMessagesInput!
}

input ChatMessageCreateWithoutRoomInput {
  content: Json
  contentText: String
  CreatedBy: UserCreateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedCreateManyWithoutMessageInput
}

"""An edge in a connection."""
type ChatMessageEdge {
  """The item at the end of the edge."""
  node: ChatMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatMessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  contentText_ASC
  contentText_DESC
}

type ChatMessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: Json
  contentText: String
}

type ChatMessageReaded implements Node {
  id: ID!
  createdAt: DateTime!
  Message(where: ChatMessageWhereInput): ChatMessage!
  User(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ChatMessageReadedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatMessageReadedEdge]!
  aggregate: AggregateChatMessageReaded!
}

input ChatMessageReadedCreateInput {
  Message: ChatMessageCreateOneWithoutReadedByInput!
}

input ChatMessageReadedCreateManyWithoutMessageInput {
  connect: [ChatMessageReadedWhereUniqueInput!]
}

input ChatMessageReadedCreateManyWithoutUserInput {
  connect: [ChatMessageReadedWhereUniqueInput!]
}

input ChatMessageReadedCreateWithoutMessageInput {
  User: UserCreateOneWithoutReadedMessagesInput!
}

input ChatMessageReadedCreateWithoutUserInput {
  Message: ChatMessageCreateOneWithoutReadedByInput!
}

"""An edge in a connection."""
type ChatMessageReadedEdge {
  """The item at the end of the edge."""
  node: ChatMessageReaded!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatMessageReadedOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatMessageReadedPreviousValues {
  id: ID!
  createdAt: DateTime!
}

type ChatMessageReadedResponse {
  success: Boolean!
  message: String!
  errors: [Error!]!
  data: ChatMessageReaded
}

type ChatMessageReadedSubscriptionPayload {
  mutation: MutationType!
  node: ChatMessageReaded
  updatedFields: [String!]
  previousValues: ChatMessageReadedPreviousValues
}

input ChatMessageReadedSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageReadedSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageReadedSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageReadedSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatMessageReadedWhereInput
}

input ChatMessageReadedUpdateInput {
  Message: ChatMessageUpdateOneWithoutReadedByInput
  User: UserUpdateOneWithoutReadedMessagesInput
}

input ChatMessageReadedUpdateManyWithoutMessageInput {
  connect: [ChatMessageReadedWhereUniqueInput!]
  disconnect: [ChatMessageReadedWhereUniqueInput!]
}

input ChatMessageReadedUpdateManyWithoutUserInput {
  connect: [ChatMessageReadedWhereUniqueInput!]
  disconnect: [ChatMessageReadedWhereUniqueInput!]
}

input ChatMessageReadedUpdateWithoutMessageDataInput {
  User: UserUpdateOneWithoutReadedMessagesInput
}

input ChatMessageReadedUpdateWithoutUserDataInput {
  Message: ChatMessageUpdateOneWithoutReadedByInput
}

input ChatMessageReadedUpdateWithWhereUniqueWithoutMessageInput {
  where: ChatMessageReadedWhereUniqueInput!
  data: ChatMessageReadedUpdateWithoutMessageDataInput!
}

input ChatMessageReadedUpdateWithWhereUniqueWithoutUserInput {
  where: ChatMessageReadedWhereUniqueInput!
  data: ChatMessageReadedUpdateWithoutUserDataInput!
}

input ChatMessageReadedUpsertWithWhereUniqueWithoutMessageInput {
  where: ChatMessageReadedWhereUniqueInput!
}

input ChatMessageReadedUpsertWithWhereUniqueWithoutUserInput {
  where: ChatMessageReadedWhereUniqueInput!
}

input ChatMessageReadedWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageReadedWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageReadedWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageReadedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  Message: ChatMessageWhereInput
  User: UserWhereInput
}

input ChatMessageReadedWhereUniqueInput {
  id: ID
}

type ChatMessageResponse {
  success: Boolean!
  message: String!
  errors: [Error!]!
  data: ChatMessage
}

type ChatMessageSubscriptionPayload {
  mutation: MutationType!
  node: ChatMessage
  updatedFields: [String!]
  previousValues: ChatMessagePreviousValues
}

input ChatMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatMessageWhereInput
}

input ChatMessageUpdateDataInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  Room: ChatRoomUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateInput {
  content: Json
}

input ChatMessageUpdateManyWithoutCreatedByInput {
  connect: [ChatMessageWhereUniqueInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageUpdateManyWithoutRoomInput {
  connect: [ChatMessageWhereUniqueInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
}

input ChatMessageUpdateOneInput {
  connect: ChatMessageWhereUniqueInput
  disconnect: Boolean
}

input ChatMessageUpdateOneWithoutReadedByInput {
  connect: ChatMessageWhereUniqueInput
}

input ChatMessageUpdateWithoutCreatedByDataInput {
  content: Json
  contentText: String
  Room: ChatRoomUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateWithoutReadedByDataInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  Room: ChatRoomUpdateOneWithoutMessagesInput
}

input ChatMessageUpdateWithoutRoomDataInput {
  content: Json
  contentText: String
  CreatedBy: UserUpdateOneWithoutMessagesInput
  ReadedBy: ChatMessageReadedUpdateManyWithoutMessageInput
}

input ChatMessageUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateWithoutCreatedByDataInput!
}

input ChatMessageUpdateWithWhereUniqueWithoutRoomInput {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateWithoutRoomDataInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutRoomInput {
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contentText: String

  """All values that are not equal to given value."""
  contentText_not: String

  """All values that are contained in given list."""
  contentText_in: [String!]

  """All values that are not contained in given list."""
  contentText_not_in: [String!]

  """All values less than the given value."""
  contentText_lt: String

  """All values less than or equal the given value."""
  contentText_lte: String

  """All values greater than the given value."""
  contentText_gt: String

  """All values greater than or equal the given value."""
  contentText_gte: String

  """All values containing the given string."""
  contentText_contains: String

  """All values not containing the given string."""
  contentText_not_contains: String

  """All values starting with the given string."""
  contentText_starts_with: String

  """All values not starting with the given string."""
  contentText_not_starts_with: String

  """All values ending with the given string."""
  contentText_ends_with: String

  """All values not ending with the given string."""
  contentText_not_ends_with: String
  CreatedBy: UserWhereInput
  Room: ChatRoomWhereInput
  ReadedBy_every: ChatMessageReadedWhereInput
  ReadedBy_some: ChatMessageReadedWhereInput
  ReadedBy_none: ChatMessageReadedWhereInput
}

input ChatMessageWhereUniqueInput {
  id: ID
}

type ChatRoom implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  image: String
  code: ID
  Members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User!
  Messages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage!]
  isPublic: Boolean
  Invitations(where: ChatRoomInvitationWhereInput, orderBy: ChatRoomInvitationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoomInvitation!]
  CallRequests(where: CallRequestWhereInput, orderBy: CallRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CallRequest!]
}

"""A connection to a list of items."""
type ChatRoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatRoomEdge]!
  aggregate: AggregateChatRoom!
}

input ChatRoomCreateInput {
  name: String!
  Members: UserCreateManyWithoutRoomsInput
  isPublic: Boolean = false
  code: ID
}

input ChatRoomCreateManyWithoutCreatedByInput {
  connect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomCreateManyWithoutMembersInput {
  connect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomCreateOneWithoutCallRequestsInput {
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateOneWithoutInvitationsInput {
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateOneWithoutMessagesInput {
  to: ID
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateWithoutCallRequestsInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
}

input ChatRoomCreateWithoutCreatedByInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateWithoutInvitationsInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateWithoutMembersInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Messages: ChatMessageCreateManyWithoutRoomInput
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

input ChatRoomCreateWithoutMessagesInput {
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserCreateManyWithoutRoomsInput
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput!
  Invitations: ChatRoomInvitationCreateManyWithoutChatRoomInput
  CallRequests: CallRequestCreateManyWithoutRoomInput
}

"""An edge in a connection."""
type ChatRoomEdge {
  """The item at the end of the edge."""
  node: ChatRoom!

  """A cursor for use in pagination."""
  cursor: String!
}

type ChatRoomInvitation implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  CreatedBy(where: UserWhereInput): User!
  User(where: UserWhereInput): User!
  ChatRoom(where: ChatRoomWhereInput): ChatRoom!
  Notice(where: NoticeWhereInput): Notice
}

"""A connection to a list of items."""
type ChatRoomInvitationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatRoomInvitationEdge]!
  aggregate: AggregateChatRoomInvitation!
}

input ChatRoomInvitationCreateInput {
  CreatedBy: UserCreateOneInput!
  User: UserCreateOneInput!
  ChatRoom: ChatRoomCreateOneWithoutInvitationsInput!
  Notice: NoticeCreateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationCreateManyWithoutChatRoomInput {
  connect: [ChatRoomInvitationWhereUniqueInput!]
}

input ChatRoomInvitationCreateOneWithoutNoticeInput {
  connect: ChatRoomInvitationWhereUniqueInput
}

input ChatRoomInvitationCreateWithoutChatRoomInput {
  CreatedBy: UserCreateOneInput!
  User: UserCreateOneInput!
  Notice: NoticeCreateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationCreateWithoutNoticeInput {
  CreatedBy: UserCreateOneInput!
  User: UserCreateOneInput!
  ChatRoom: ChatRoomCreateOneWithoutInvitationsInput!
}

"""An edge in a connection."""
type ChatRoomInvitationEdge {
  """The item at the end of the edge."""
  node: ChatRoomInvitation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatRoomInvitationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatRoomInvitationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChatRoomInvitationSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoomInvitation
  updatedFields: [String!]
  previousValues: ChatRoomInvitationPreviousValues
}

input ChatRoomInvitationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomInvitationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomInvitationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomInvitationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatRoomInvitationWhereInput
}

input ChatRoomInvitationUpdateInput {
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  ChatRoom: ChatRoomUpdateOneWithoutInvitationsInput
  Notice: NoticeUpdateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationUpdateManyWithoutChatRoomInput {
  connect: [ChatRoomInvitationWhereUniqueInput!]
  disconnect: [ChatRoomInvitationWhereUniqueInput!]
}

input ChatRoomInvitationUpdateOneWithoutNoticeInput {
  connect: ChatRoomInvitationWhereUniqueInput
  disconnect: Boolean
}

input ChatRoomInvitationUpdateWithoutChatRoomDataInput {
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  Notice: NoticeUpdateOneWithoutChatRoomInvitationInput
}

input ChatRoomInvitationUpdateWithoutNoticeDataInput {
  CreatedBy: UserUpdateOneInput
  User: UserUpdateOneInput
  ChatRoom: ChatRoomUpdateOneWithoutInvitationsInput
}

input ChatRoomInvitationUpdateWithWhereUniqueWithoutChatRoomInput {
  where: ChatRoomInvitationWhereUniqueInput!
  data: ChatRoomInvitationUpdateWithoutChatRoomDataInput!
}

input ChatRoomInvitationUpsertWithWhereUniqueWithoutChatRoomInput {
  where: ChatRoomInvitationWhereUniqueInput!
}

input ChatRoomInvitationWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomInvitationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomInvitationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomInvitationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  CreatedBy: UserWhereInput
  User: UserWhereInput
  ChatRoom: ChatRoomWhereInput
  Notice: NoticeWhereInput
}

input ChatRoomInvitationWhereUniqueInput {
  id: ID
}

input ChatRoomInviteInput {
  User: UserWhereUniqueInput!
}

enum ChatRoomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  code_ASC
  code_DESC
  isPublic_ASC
  isPublic_DESC
}

type ChatRoomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  image: String
  code: ID
  isPublic: Boolean
}

type ChatRoomResponse {
  success: Boolean!
  message: String!
  errors: [Error!]!
  data: ChatRoom
}

type ChatRoomSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoom
  updatedFields: [String!]
  previousValues: ChatRoomPreviousValues
}

input ChatRoomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatRoomWhereInput
}

input ChatRoomUpdateInput {
  name: String
  Members: UserUpdateManyWithoutRoomsInput
  isPublic: Boolean
  code: ID
}

input ChatRoomUpdateManyWithoutCreatedByInput {
  connect: [ChatRoomWhereUniqueInput!]
  disconnect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomUpdateManyWithoutMembersInput {
  connect: [ChatRoomWhereUniqueInput!]
  disconnect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomUpdateOneWithoutCallRequestsInput {
  connect: ChatRoomWhereUniqueInput
  disconnect: Boolean
}

input ChatRoomUpdateOneWithoutInvitationsInput {
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomUpdateOneWithoutMessagesInput {
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomUpdateWithoutCallRequestsDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
}

input ChatRoomUpdateWithoutCreatedByDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithoutInvitationsDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithoutMembersDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Messages: ChatMessageUpdateManyWithoutRoomInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithoutMessagesDataInput {
  name: String
  description: String
  image: String
  code: ID
  isPublic: Boolean
  Members: UserUpdateManyWithoutRoomsInput
  CreatedBy: UserUpdateOneWithoutCreatedRoomsInput
  Invitations: ChatRoomInvitationUpdateManyWithoutChatRoomInput
  CallRequests: CallRequestUpdateManyWithoutRoomInput
}

input ChatRoomUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutCreatedByDataInput!
}

input ChatRoomUpdateWithWhereUniqueWithoutMembersInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutMembersDataInput!
}

input ChatRoomUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChatRoomWhereUniqueInput!
}

input ChatRoomUpsertWithWhereUniqueWithoutMembersInput {
  where: ChatRoomWhereUniqueInput!
}

input ChatRoomWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatRoomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatRoomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatRoomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  isPublic: Boolean

  """All values that are not equal to given value."""
  isPublic_not: Boolean
  Members_every: UserWhereInput
  Members_some: UserWhereInput
  Members_none: UserWhereInput
  CreatedBy: UserWhereInput
  Messages_every: ChatMessageWhereInput
  Messages_some: ChatMessageWhereInput
  Messages_none: ChatMessageWhereInput
  Invitations_every: ChatRoomInvitationWhereInput
  Invitations_some: ChatRoomInvitationWhereInput
  Invitations_none: ChatRoomInvitationWhereInput
  CallRequests_every: CallRequestWhereInput
  CallRequests_some: CallRequestWhereInput
  CallRequests_none: CallRequestWhereInput
}

input ChatRoomWhereUniqueInput {
  id: ID
  code: ID
}

scalar DateTime

type Error {
  key: String!
  message: String!
}

type EthAccount implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  CreatedBy(where: UserWhereInput): User!
  Transaction(where: EthTransactionWhereInput): EthTransaction
  IncomeTransactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction!]
  OutcomeTransactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction!]
  description: Json
  source: String
  bytecode: String
  abi: Json
  ContractSource(where: EthContractSourceWhereInput): EthContractSource
  balance(convert: EthAmountConvert): Float
}

"""A connection to a list of items."""
type EthAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthAccountEdge]!
  aggregate: AggregateEthAccount!
}

input EthAccountCreateInput {
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput!
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
}

input EthAccountCreateManyWithoutContractSourceInput {
  connect: [EthAccountWhereUniqueInput!]
}

input EthAccountCreateManyWithoutCreatedByInput {
  connect: [EthAccountWhereUniqueInput!]
}

input EthAccountCreateOneWithoutIncomeTransactionsInput {
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateOneWithoutOutcomeTransactionsInput {
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateOneWithoutTransactionInput {
  connect: EthAccountWhereUniqueInput
}

input EthAccountCreateWithoutContractSourceInput {
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput!
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
}

input EthAccountCreateWithoutCreatedByInput {
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
}

input EthAccountCreateWithoutIncomeTransactionsInput {
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput!
  Transaction: EthTransactionCreateOneWithoutAccountInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
}

input EthAccountCreateWithoutOutcomeTransactionsInput {
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput!
  Transaction: EthTransactionCreateOneWithoutAccountInput
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
}

input EthAccountCreateWithoutTransactionInput {
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserCreateOneWithoutEthAccountsInput!
  IncomeTransactions: EthTransactionCreateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionCreateManyWithoutSenderInput
  ContractSource: EthContractSourceCreateOneWithoutAccountsInput
}

"""An edge in a connection."""
type EthAccountEdge {
  """The item at the end of the edge."""
  node: EthAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthAccountOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  chainId_ASC
  chainId_DESC
  address_ASC
  address_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  source_ASC
  source_DESC
  bytecode_ASC
  bytecode_DESC
  abi_ASC
  abi_DESC
}

type EthAccountPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  chainId: Int!
  address: String!
  type: EthAccountType!
  description: Json
  source: String
  bytecode: String
  abi: Json
}

type EthAccountSubscriptionPayload {
  mutation: MutationType!
  node: EthAccount
  updatedFields: [String!]
  previousValues: EthAccountPreviousValues
}

input EthAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthAccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthAccountWhereInput
}

enum EthAccountType {
  Account
  Contract
}

input EthAccountUpdateInput {
  name: String
  chainId: Int
  address: String
  type: EthAccountType
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
}

input EthAccountUpdateManyWithoutContractSourceInput {
  connect: [EthAccountWhereUniqueInput!]
  disconnect: [EthAccountWhereUniqueInput!]
}

input EthAccountUpdateManyWithoutCreatedByInput {
  connect: [EthAccountWhereUniqueInput!]
  disconnect: [EthAccountWhereUniqueInput!]
}

input EthAccountUpdateOneWithoutIncomeTransactionsInput {
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
}

input EthAccountUpdateOneWithoutOutcomeTransactionsInput {
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
}

input EthAccountUpdateOneWithoutTransactionInput {
  connect: EthAccountWhereUniqueInput
  disconnect: Boolean
}

input EthAccountUpdateWithoutContractSourceDataInput {
  name: String
  chainId: Int
  address: String
  type: EthAccountType
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
}

input EthAccountUpdateWithoutCreatedByDataInput {
  name: String
  chainId: Int
  address: String
  type: EthAccountType
  description: Json
  source: String
  bytecode: String
  abi: Json
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
}

input EthAccountUpdateWithoutIncomeTransactionsDataInput {
  name: String
  chainId: Int
  address: String
  type: EthAccountType
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
}

input EthAccountUpdateWithoutOutcomeTransactionsDataInput {
  name: String
  chainId: Int
  address: String
  type: EthAccountType
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  Transaction: EthTransactionUpdateOneWithoutAccountInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
}

input EthAccountUpdateWithoutTransactionDataInput {
  name: String
  chainId: Int
  address: String
  type: EthAccountType
  description: Json
  source: String
  bytecode: String
  abi: Json
  CreatedBy: UserUpdateOneWithoutEthAccountsInput
  IncomeTransactions: EthTransactionUpdateManyWithoutReceiverInput
  OutcomeTransactions: EthTransactionUpdateManyWithoutSenderInput
  ContractSource: EthContractSourceUpdateOneWithoutAccountsInput
}

input EthAccountUpdateWithWhereUniqueWithoutContractSourceInput {
  where: EthAccountWhereUniqueInput!
  data: EthAccountUpdateWithoutContractSourceDataInput!
}

input EthAccountUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EthAccountWhereUniqueInput!
  data: EthAccountUpdateWithoutCreatedByDataInput!
}

input EthAccountUpsertWithWhereUniqueWithoutContractSourceInput {
  where: EthAccountWhereUniqueInput!
}

input EthAccountUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EthAccountWhereUniqueInput!
}

input EthAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [EthAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  chainId: Int

  """All values that are not equal to given value."""
  chainId_not: Int

  """All values that are contained in given list."""
  chainId_in: [Int!]

  """All values that are not contained in given list."""
  chainId_not_in: [Int!]

  """All values less than the given value."""
  chainId_lt: Int

  """All values less than or equal the given value."""
  chainId_lte: Int

  """All values greater than the given value."""
  chainId_gt: Int

  """All values greater than or equal the given value."""
  chainId_gte: Int
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  type: EthAccountType

  """All values that are not equal to given value."""
  type_not: EthAccountType

  """All values that are contained in given list."""
  type_in: [EthAccountType!]

  """All values that are not contained in given list."""
  type_not_in: [EthAccountType!]
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  bytecode: String

  """All values that are not equal to given value."""
  bytecode_not: String

  """All values that are contained in given list."""
  bytecode_in: [String!]

  """All values that are not contained in given list."""
  bytecode_not_in: [String!]

  """All values less than the given value."""
  bytecode_lt: String

  """All values less than or equal the given value."""
  bytecode_lte: String

  """All values greater than the given value."""
  bytecode_gt: String

  """All values greater than or equal the given value."""
  bytecode_gte: String

  """All values containing the given string."""
  bytecode_contains: String

  """All values not containing the given string."""
  bytecode_not_contains: String

  """All values starting with the given string."""
  bytecode_starts_with: String

  """All values not starting with the given string."""
  bytecode_not_starts_with: String

  """All values ending with the given string."""
  bytecode_ends_with: String

  """All values not ending with the given string."""
  bytecode_not_ends_with: String
  CreatedBy: UserWhereInput
  Transaction: EthTransactionWhereInput
  IncomeTransactions_every: EthTransactionWhereInput
  IncomeTransactions_some: EthTransactionWhereInput
  IncomeTransactions_none: EthTransactionWhereInput
  OutcomeTransactions_every: EthTransactionWhereInput
  OutcomeTransactions_some: EthTransactionWhereInput
  OutcomeTransactions_none: EthTransactionWhereInput
  ContractSource: EthContractSourceWhereInput
}

input EthAccountWhereUniqueInput {
  id: ID
  address: String
}

enum EthAmountConvert {
  wei
  Kwei
  Mwei
  Gwei
  nano
  ether
  kether
  mether
  gether
  tether
}

type EthContractSource implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: Json
  source: String
  CreatedBy(where: UserWhereInput): User!
  Accounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount!]
}

"""A connection to a list of items."""
type EthContractSourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthContractSourceEdge]!
  aggregate: AggregateEthContractSource!
}

input EthContractSourceCreateInput {
  name: String!
  description: Json
  source: String
  bytecode: String
  abi: Json
}

input EthContractSourceCreateManyInput {
  connect: [EthContractSourceWhereUniqueInput!]
}

input EthContractSourceCreateOneWithoutAccountsInput {
  connect: EthContractSourceWhereUniqueInput
}

input EthContractSourceCreateWithoutAccountsInput {
  name: String!
  description: Json
  source: String
  CreatedBy: UserCreateOneInput!
}

input EthContractSourceDeployInput {
  password: String
  params: Json
  gas: Int
  gasPrice: Int
}

"""An edge in a connection."""
type EthContractSourceEdge {
  """The item at the end of the edge."""
  node: EthContractSource!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthContractSourceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  source_ASC
  source_DESC
}

type EthContractSourcePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: Json
  source: String
}

type EthContractSourceResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: EthContractSource
}

type EthContractSourceSubscriptionPayload {
  mutation: MutationType!
  node: EthContractSource
  updatedFields: [String!]
  previousValues: EthContractSourcePreviousValues
}

input EthContractSourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthContractSourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthContractSourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthContractSourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthContractSourceWhereInput
}

input EthContractSourceUpdateDataInput {
  name: String
  description: Json
  source: String
  CreatedBy: UserUpdateOneInput
  Accounts: EthAccountUpdateManyWithoutContractSourceInput
}

input EthContractSourceUpdateInput {
  name: String
  description: Json
  source: String
  bytecode: String
  abi: Json
}

input EthContractSourceUpdateManyInput {
  connect: [EthContractSourceWhereUniqueInput!]
  disconnect: [EthContractSourceWhereUniqueInput!]
}

input EthContractSourceUpdateOneWithoutAccountsInput {
  connect: EthContractSourceWhereUniqueInput
  disconnect: Boolean
}

input EthContractSourceUpdateWithoutAccountsDataInput {
  name: String
  description: Json
  source: String
  CreatedBy: UserUpdateOneInput
}

input EthContractSourceUpdateWithWhereUniqueNestedInput {
  where: EthContractSourceWhereUniqueInput!
  data: EthContractSourceUpdateDataInput!
}

input EthContractSourceUpsertWithWhereUniqueNestedInput {
  where: EthContractSourceWhereUniqueInput!
}

input EthContractSourceWhereInput {
  """Logical AND on all given filters."""
  AND: [EthContractSourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthContractSourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthContractSourceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  CreatedBy: UserWhereInput
  Accounts_every: EthAccountWhereInput
  Accounts_some: EthAccountWhereInput
  Accounts_none: EthAccountWhereInput
}

input EthContractSourceWhereUniqueInput {
  id: ID
}

type ethNet {
  id: Int!
  isListening: Boolean!
  peerCount: Int!
}

type EthPersonalAccount {
  address: String!
  balance(convert: EthAmountConvert): Float
}

input EthPersonalAccountCreateInput {
  password: String!
}

type EthPersonalAccountResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: EthPersonalAccount
}

type ethSyncState {
  """The block number where the sync started"""
  startingBlock: Int!

  """
  The block number where at which block the node currently synced to already
  """
  currentBlock: Int!

  """The estimated block number to sync to"""
  highestBlock: Int!

  """The estimated states to download"""
  knownStates: Int!

  """The already downloaded states"""
  pulledStates: Int!
}

type EthTransaction implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  chainId: Int!
  amount: Float
  Sender(where: EthAccountWhereInput): EthAccount
  Receiver(where: EthAccountWhereInput): EthAccount
  Account(where: EthAccountWhereInput): EthAccount
  address: String!
  type: EthTransactionTypes!
}

"""A connection to a list of items."""
type EthTransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EthTransactionEdge]!
  aggregate: AggregateEthTransaction!
}

input EthTransactionCreateInput {
  privateKey: String!
  type: EthTransactionTypes!
  to: String
  amount: Float
  gasPrice: Int
  contractSourceId: ID
}

input EthTransactionCreateManyWithoutReceiverInput {
  connect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionCreateManyWithoutSenderInput {
  connect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionCreateOneWithoutAccountInput {
  connect: EthTransactionWhereUniqueInput
}

input EthTransactionCreateWithoutAccountInput {
  chainId: Int!
  amount: Float
  address: String!
  type: EthTransactionTypes!
  Sender: EthAccountCreateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountCreateOneWithoutIncomeTransactionsInput
}

input EthTransactionCreateWithoutReceiverInput {
  chainId: Int!
  amount: Float
  address: String!
  type: EthTransactionTypes!
  Sender: EthAccountCreateOneWithoutOutcomeTransactionsInput
  Account: EthAccountCreateOneWithoutTransactionInput
}

input EthTransactionCreateWithoutSenderInput {
  chainId: Int!
  amount: Float
  address: String!
  type: EthTransactionTypes!
  Receiver: EthAccountCreateOneWithoutIncomeTransactionsInput
  Account: EthAccountCreateOneWithoutTransactionInput
}

"""An edge in a connection."""
type EthTransactionEdge {
  """The item at the end of the edge."""
  node: EthTransaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EthTransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  chainId_ASC
  chainId_DESC
  amount_ASC
  amount_DESC
  address_ASC
  address_DESC
  type_ASC
  type_DESC
}

type EthTransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  chainId: Int!
  amount: Float
  address: String!
  type: EthTransactionTypes!
}

type EthTransactionResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: EthTransaction
}

type EthTransactionSubscriptionPayload {
  mutation: MutationType!
  node: EthTransaction
}

input EthTransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthTransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthTransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthTransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthTransactionWhereInput
}

enum EthTransactionTypes {
  ContractCreate
  ContractRead
  ContractCall
  SendEth
  SendToken
}

input EthTransactionUpdateInput {
  chainId: Int
  amount: Float
  address: String
  type: EthTransactionTypes
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
}

input EthTransactionUpdateManyWithoutReceiverInput {
  connect: [EthTransactionWhereUniqueInput!]
  disconnect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionUpdateManyWithoutSenderInput {
  connect: [EthTransactionWhereUniqueInput!]
  disconnect: [EthTransactionWhereUniqueInput!]
}

input EthTransactionUpdateOneWithoutAccountInput {
  connect: EthTransactionWhereUniqueInput
  disconnect: Boolean
}

input EthTransactionUpdateWithoutAccountDataInput {
  chainId: Int
  amount: Float
  address: String
  type: EthTransactionTypes
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
}

input EthTransactionUpdateWithoutReceiverDataInput {
  chainId: Int
  amount: Float
  address: String
  type: EthTransactionTypes
  Sender: EthAccountUpdateOneWithoutOutcomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
}

input EthTransactionUpdateWithoutSenderDataInput {
  chainId: Int
  amount: Float
  address: String
  type: EthTransactionTypes
  Receiver: EthAccountUpdateOneWithoutIncomeTransactionsInput
  Account: EthAccountUpdateOneWithoutTransactionInput
}

input EthTransactionUpdateWithWhereUniqueWithoutReceiverInput {
  where: EthTransactionWhereUniqueInput!
  data: EthTransactionUpdateWithoutReceiverDataInput!
}

input EthTransactionUpdateWithWhereUniqueWithoutSenderInput {
  where: EthTransactionWhereUniqueInput!
  data: EthTransactionUpdateWithoutSenderDataInput!
}

input EthTransactionUpsertWithWhereUniqueWithoutReceiverInput {
  where: EthTransactionWhereUniqueInput!
}

input EthTransactionUpsertWithWhereUniqueWithoutSenderInput {
  where: EthTransactionWhereUniqueInput!
}

input EthTransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [EthTransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EthTransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EthTransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  chainId: Int

  """All values that are not equal to given value."""
  chainId_not: Int

  """All values that are contained in given list."""
  chainId_in: [Int!]

  """All values that are not contained in given list."""
  chainId_not_in: [Int!]

  """All values less than the given value."""
  chainId_lt: Int

  """All values less than or equal the given value."""
  chainId_lte: Int

  """All values greater than the given value."""
  chainId_gt: Int

  """All values greater than or equal the given value."""
  chainId_gte: Int
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  type: EthTransactionTypes

  """All values that are not equal to given value."""
  type_not: EthTransactionTypes

  """All values that are contained in given list."""
  type_in: [EthTransactionTypes!]

  """All values that are not contained in given list."""
  type_not_in: [EthTransactionTypes!]
  Sender: EthAccountWhereInput
  Receiver: EthAccountWhereInput
  Account: EthAccountWhereInput
}

input EthTransactionWhereUniqueInput {
  id: ID
  address: String
}

type File implements Node {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  hash: String
  CreatedBy(where: UserWhereInput): User!
  ImageResource(where: ResourceWhereInput): Resource
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  hash: String
  CreatedBy: UserCreateOneWithoutFilesInput!
  ImageResource: ResourceCreateOneWithoutImageInput
}

input FileCreateManyWithoutCreatedByInput {
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneWithoutImageResourceInput {
  connect: FileWhereUniqueInput
}

input FileCreateWithoutCreatedByInput {
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  hash: String
  ImageResource: ResourceCreateOneWithoutImageInput
}

input FileCreateWithoutImageResourceInput {
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  hash: String
  CreatedBy: UserCreateOneWithoutFilesInput!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  path_ASC
  path_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  hash_ASC
  hash_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
  hash: String
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  hash: String
  CreatedBy: UserUpdateOneWithoutFilesInput
  ImageResource: ResourceUpdateOneWithoutImageInput
}

input FileUpdateManyWithoutCreatedByInput {
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
}

input FileUpdateOneWithoutImageResourceInput {
  connect: FileWhereUniqueInput
  disconnect: Boolean
}

input FileUpdateWithoutCreatedByDataInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  hash: String
  ImageResource: ResourceUpdateOneWithoutImageInput
}

input FileUpdateWithoutImageResourceDataInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
  hash: String
  CreatedBy: UserUpdateOneWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutCreatedByDataInput!
}

input FileUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  CreatedBy: UserWhereInput
  ImageResource: ResourceWhereInput
}

input FileWhereUniqueInput {
  id: ID
}

type IceCandidate {
  from: String!
  to: String!
  sdp: Json!
  callRequestId: String!
}

"""Raw JSON value"""
scalar Json

type LetsadsSmsMessageStatus implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  SmsMessage(where: SmsMessageWhereInput): SmsMessage!
  Items(where: LetsadsSmsMessageStatusItemWhereInput, orderBy: LetsadsSmsMessageStatusItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LetsadsSmsMessageStatusItem!]
}

"""A connection to a list of items."""
type LetsadsSmsMessageStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LetsadsSmsMessageStatusEdge]!
  aggregate: AggregateLetsadsSmsMessageStatus!
}

input LetsadsSmsMessageStatusCreateInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  SmsMessage: SmsMessageCreateOneWithoutStatusInput!
  Items: LetsadsSmsMessageStatusItemCreateManyInput
}

input LetsadsSmsMessageStatusCreateOneWithoutSmsMessageInput {
  connect: LetsadsSmsMessageStatusWhereUniqueInput
}

input LetsadsSmsMessageStatusCreateWithoutSmsMessageInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  Items: LetsadsSmsMessageStatusItemCreateManyInput
}

"""An edge in a connection."""
type LetsadsSmsMessageStatusEdge {
  """The item at the end of the edge."""
  node: LetsadsSmsMessageStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LetsadsSmsMessageStatusEnum {
  Complete
  Error
}

enum LetsadsSmsMessageStatusErrorCodeEnum {
  NO_DATA
  WRONG_DATA_FORMAT
  REQUEST_FORMAT
  AUTH_DATA
  API_DISABLED
  USER_NOT_MODERATED
  INCORRECT_FROM
  INVALID_FROM
  MESSAGE_TOO_LONG
  NO_MESSAGE
  MAX_MESSAGES_COUNT
  NOT_ENOUGH_MONEY
  UNKNOWN_ERROR
}

type LetsadsSmsMessageStatusItem implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  sms_id: Int!
}

"""A connection to a list of items."""
type LetsadsSmsMessageStatusItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LetsadsSmsMessageStatusItemEdge]!
  aggregate: AggregateLetsadsSmsMessageStatusItem!
}

input LetsadsSmsMessageStatusItemCreateInput {
  sms_id: Int!
}

input LetsadsSmsMessageStatusItemCreateManyInput {
  connect: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
}

"""An edge in a connection."""
type LetsadsSmsMessageStatusItemEdge {
  """The item at the end of the edge."""
  node: LetsadsSmsMessageStatusItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LetsadsSmsMessageStatusItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  sms_id_ASC
  sms_id_DESC
}

type LetsadsSmsMessageStatusItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  sms_id: Int!
}

type LetsadsSmsMessageStatusItemSubscriptionPayload {
  mutation: MutationType!
  node: LetsadsSmsMessageStatusItem
  updatedFields: [String!]
  previousValues: LetsadsSmsMessageStatusItemPreviousValues
}

input LetsadsSmsMessageStatusItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LetsadsSmsMessageStatusItemWhereInput
}

input LetsadsSmsMessageStatusItemUpdateDataInput {
  sms_id: Int
}

input LetsadsSmsMessageStatusItemUpdateInput {
  sms_id: Int
}

input LetsadsSmsMessageStatusItemUpdateManyInput {
  connect: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
  disconnect: [LetsadsSmsMessageStatusItemWhereUniqueInput!]
}

input LetsadsSmsMessageStatusItemUpdateWithWhereUniqueNestedInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput!
  data: LetsadsSmsMessageStatusItemUpdateDataInput!
}

input LetsadsSmsMessageStatusItemUpsertWithWhereUniqueNestedInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput!
}

input LetsadsSmsMessageStatusItemWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  sms_id: Int

  """All values that are not equal to given value."""
  sms_id_not: Int

  """All values that are contained in given list."""
  sms_id_in: [Int!]

  """All values that are not contained in given list."""
  sms_id_not_in: [Int!]

  """All values less than the given value."""
  sms_id_lt: Int

  """All values less than or equal the given value."""
  sms_id_lte: Int

  """All values greater than the given value."""
  sms_id_gt: Int

  """All values greater than or equal the given value."""
  sms_id_gte: Int
}

input LetsadsSmsMessageStatusItemWhereUniqueInput {
  id: ID
  sms_id: Int
}

enum LetsadsSmsMessageStatusOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  errorCode_ASC
  errorCode_DESC
}

type LetsadsSmsMessageStatusPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
}

type LetsadsSmsMessageStatusSubscriptionPayload {
  mutation: MutationType!
  node: LetsadsSmsMessageStatus
  updatedFields: [String!]
  previousValues: LetsadsSmsMessageStatusPreviousValues
}

input LetsadsSmsMessageStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LetsadsSmsMessageStatusWhereInput
}

input LetsadsSmsMessageStatusUpdateInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  SmsMessage: SmsMessageUpdateOneWithoutStatusInput
  Items: LetsadsSmsMessageStatusItemUpdateManyInput
}

input LetsadsSmsMessageStatusUpdateOneWithoutSmsMessageInput {
  connect: LetsadsSmsMessageStatusWhereUniqueInput
  disconnect: Boolean
}

input LetsadsSmsMessageStatusUpdateWithoutSmsMessageDataInput {
  name: LetsadsSmsMessageStatusEnum
  description: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum
  Items: LetsadsSmsMessageStatusItemUpdateManyInput
}

input LetsadsSmsMessageStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [LetsadsSmsMessageStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetsadsSmsMessageStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetsadsSmsMessageStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: LetsadsSmsMessageStatusEnum

  """All values that are not equal to given value."""
  name_not: LetsadsSmsMessageStatusEnum

  """All values that are contained in given list."""
  name_in: [LetsadsSmsMessageStatusEnum!]

  """All values that are not contained in given list."""
  name_not_in: [LetsadsSmsMessageStatusEnum!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  errorCode: LetsadsSmsMessageStatusErrorCodeEnum

  """All values that are not equal to given value."""
  errorCode_not: LetsadsSmsMessageStatusErrorCodeEnum

  """All values that are contained in given list."""
  errorCode_in: [LetsadsSmsMessageStatusErrorCodeEnum!]

  """All values that are not contained in given list."""
  errorCode_not_in: [LetsadsSmsMessageStatusErrorCodeEnum!]
  SmsMessage: SmsMessageWhereInput
  Items_every: LetsadsSmsMessageStatusItemWhereInput
  Items_some: LetsadsSmsMessageStatusItemWhereInput
  Items_none: LetsadsSmsMessageStatusItemWhereInput
}

input LetsadsSmsMessageStatusWhereUniqueInput {
  id: ID
}

type Letter implements Node {
  id: ID!
  email: String!
  subject: String!
  message: String!
  status: LetterStatus!
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
  User(where: UserWhereInput): User
}

"""A connection to a list of items."""
type LetterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LetterEdge]!
  aggregate: AggregateLetter!
}

input LetterCreateInput {
  email: String!
  subject: String!
  message: String!
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
  User: UserCreateOneWithoutLettersCreatedInput
}

input LetterCreateManyWithoutUserInput {
  connect: [LetterWhereUniqueInput!]
}

input LetterCreateWithoutUserInput {
  email: String!
  subject: String!
  message: String!
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
}

"""An edge in a connection."""
type LetterEdge {
  """The item at the end of the edge."""
  node: Letter!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LetterOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  subject_ASC
  subject_DESC
  message_ASC
  message_DESC
  status_ASC
  status_DESC
  rank_ASC
  rank_DESC
  deleteOnSend_ASC
  deleteOnSend_DESC
  replyTo_ASC
  replyTo_DESC
  returnTo_ASC
  returnTo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LetterPreviousValues {
  id: ID!
  email: String!
  subject: String!
  message: String!
  status: LetterStatus!
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
}

enum LetterStatus {
  Created
  Processing
  Sended
  Error
}

type LetterSubscriptionPayload {
  mutation: MutationType!
  node: Letter
  updatedFields: [String!]
  previousValues: LetterPreviousValues
}

input LetterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LetterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LetterWhereInput
}

input LetterUpdateInput {
  email: String
  subject: String
  message: String
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
  User: UserUpdateOneWithoutLettersCreatedInput
}

input LetterUpdateManyWithoutUserInput {
  connect: [LetterWhereUniqueInput!]
  disconnect: [LetterWhereUniqueInput!]
}

input LetterUpdateWithoutUserDataInput {
  email: String
  subject: String
  message: String
  status: LetterStatus
  rank: Int
  deleteOnSend: Boolean
  replyTo: String
  returnTo: String
}

input LetterUpdateWithWhereUniqueWithoutUserInput {
  where: LetterWhereUniqueInput!
  data: LetterUpdateWithoutUserDataInput!
}

input LetterUpsertWithWhereUniqueWithoutUserInput {
  where: LetterWhereUniqueInput!
}

input LetterWhereInput {
  """Logical AND on all given filters."""
  AND: [LetterWhereInput!]

  """Logical OR on all given filters."""
  OR: [LetterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LetterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  status: LetterStatus

  """All values that are not equal to given value."""
  status_not: LetterStatus

  """All values that are contained in given list."""
  status_in: [LetterStatus!]

  """All values that are not contained in given list."""
  status_not_in: [LetterStatus!]
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  deleteOnSend: Boolean

  """All values that are not equal to given value."""
  deleteOnSend_not: Boolean
  replyTo: String

  """All values that are not equal to given value."""
  replyTo_not: String

  """All values that are contained in given list."""
  replyTo_in: [String!]

  """All values that are not contained in given list."""
  replyTo_not_in: [String!]

  """All values less than the given value."""
  replyTo_lt: String

  """All values less than or equal the given value."""
  replyTo_lte: String

  """All values greater than the given value."""
  replyTo_gt: String

  """All values greater than or equal the given value."""
  replyTo_gte: String

  """All values containing the given string."""
  replyTo_contains: String

  """All values not containing the given string."""
  replyTo_not_contains: String

  """All values starting with the given string."""
  replyTo_starts_with: String

  """All values not starting with the given string."""
  replyTo_not_starts_with: String

  """All values ending with the given string."""
  replyTo_ends_with: String

  """All values not ending with the given string."""
  replyTo_not_ends_with: String
  returnTo: String

  """All values that are not equal to given value."""
  returnTo_not: String

  """All values that are contained in given list."""
  returnTo_in: [String!]

  """All values that are not contained in given list."""
  returnTo_not_in: [String!]

  """All values less than the given value."""
  returnTo_lt: String

  """All values less than or equal the given value."""
  returnTo_lte: String

  """All values greater than the given value."""
  returnTo_gt: String

  """All values greater than or equal the given value."""
  returnTo_gte: String

  """All values containing the given string."""
  returnTo_contains: String

  """All values not containing the given string."""
  returnTo_not_contains: String

  """All values starting with the given string."""
  returnTo_starts_with: String

  """All values not starting with the given string."""
  returnTo_not_starts_with: String

  """All values ending with the given string."""
  returnTo_ends_with: String

  """All values not ending with the given string."""
  returnTo_not_ends_with: String
  User: UserWhereInput
}

input LetterWhereUniqueInput {
  id: ID
}

type Log implements Node {
  id: ID!
  level: LogLevel!
  objectType: ID
  message: String!
  stack: String
}

"""A connection to a list of items."""
type LogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogEdge]!
  aggregate: AggregateLog!
}

input LogCreateInput {
  level: LogLevel
  objectType: ID
  message: String!
  stack: String
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge."""
  node: Log!

  """A cursor for use in pagination."""
  cursor: String!
}

type LogedIn implements Node {
  id: ID!
  createdAt: DateTime!
  fake: Boolean
  User(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type LogedInConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogedInEdge]!
  aggregate: AggregateLogedIn!
}

input LogedInCreateInput {
  fake: Boolean
  User: UserCreateOneWithoutLogedInsInput!
}

input LogedInCreateManyWithoutUserInput {
  connect: [LogedInWhereUniqueInput!]
}

input LogedInCreateWithoutUserInput {
  fake: Boolean
}

"""An edge in a connection."""
type LogedInEdge {
  """The item at the end of the edge."""
  node: LogedIn!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LogedInOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  fake_ASC
  fake_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LogedInPreviousValues {
  id: ID!
  createdAt: DateTime!
  fake: Boolean
}

type LogedInSubscriptionPayload {
  mutation: MutationType!
  node: LogedIn
  updatedFields: [String!]
  previousValues: LogedInPreviousValues
}

input LogedInSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogedInSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogedInSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogedInSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogedInWhereInput
}

input LogedInUpdateInput {
  fake: Boolean
  User: UserUpdateOneWithoutLogedInsInput
}

input LogedInUpdateManyWithoutUserInput {
  connect: [LogedInWhereUniqueInput!]
  disconnect: [LogedInWhereUniqueInput!]
}

input LogedInUpdateWithoutUserDataInput {
  fake: Boolean
}

input LogedInUpdateWithWhereUniqueWithoutUserInput {
  where: LogedInWhereUniqueInput!
  data: LogedInUpdateWithoutUserDataInput!
}

input LogedInUpsertWithWhereUniqueWithoutUserInput {
  where: LogedInWhereUniqueInput!
}

input LogedInWhereInput {
  """Logical AND on all given filters."""
  AND: [LogedInWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogedInWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogedInWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  fake: Boolean

  """All values that are not equal to given value."""
  fake_not: Boolean
  User: UserWhereInput
}

input LogedInWhereUniqueInput {
  id: ID
}

enum LogLevel {
  Info
  Notice
  Warning
  Error
  Fatal
}

enum LogOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  objectType_ASC
  objectType_DESC
  message_ASC
  message_DESC
  stack_ASC
  stack_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LogPreviousValues {
  id: ID!
  level: LogLevel!
  objectType: ID
  message: String!
  stack: String
}

type LogSubscriptionPayload {
  mutation: MutationType!
  node: Log
  updatedFields: [String!]
  previousValues: LogPreviousValues
}

input LogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogWhereInput
}

input LogUpdateInput {
  level: LogLevel
  objectType: ID
  message: String
  stack: String
}

input LogWhereInput {
  """Logical AND on all given filters."""
  AND: [LogWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: LogLevel

  """All values that are not equal to given value."""
  level_not: LogLevel

  """All values that are contained in given list."""
  level_in: [LogLevel!]

  """All values that are not contained in given list."""
  level_not_in: [LogLevel!]
  objectType: ID

  """All values that are not equal to given value."""
  objectType_not: ID

  """All values that are contained in given list."""
  objectType_in: [ID!]

  """All values that are not contained in given list."""
  objectType_not_in: [ID!]

  """All values less than the given value."""
  objectType_lt: ID

  """All values less than or equal the given value."""
  objectType_lte: ID

  """All values greater than the given value."""
  objectType_gt: ID

  """All values greater than or equal the given value."""
  objectType_gte: ID

  """All values containing the given string."""
  objectType_contains: ID

  """All values not containing the given string."""
  objectType_not_contains: ID

  """All values starting with the given string."""
  objectType_starts_with: ID

  """All values not starting with the given string."""
  objectType_not_starts_with: ID

  """All values ending with the given string."""
  objectType_ends_with: ID

  """All values not ending with the given string."""
  objectType_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  stack: String

  """All values that are not equal to given value."""
  stack_not: String

  """All values that are contained in given list."""
  stack_in: [String!]

  """All values that are not contained in given list."""
  stack_not_in: [String!]

  """All values less than the given value."""
  stack_lt: String

  """All values less than or equal the given value."""
  stack_lte: String

  """All values greater than the given value."""
  stack_gt: String

  """All values greater than or equal the given value."""
  stack_gte: String

  """All values containing the given string."""
  stack_contains: String

  """All values not containing the given string."""
  stack_not_contains: String

  """All values starting with the given string."""
  stack_starts_with: String

  """All values not starting with the given string."""
  stack_not_starts_with: String

  """All values ending with the given string."""
  stack_ends_with: String

  """All values not ending with the given string."""
  stack_not_ends_with: String
}

input LogWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCallRequest(data: CallRequestCreateInput!): CallRequest!
  updateChatRoom(data: ChatRoomUpdateInput!, where: ChatRoomWhereUniqueInput!): ChatRoom
  updateCallRequest(data: CallRequestUpdateInput!, where: CallRequestWhereUniqueInput!): CallRequest
  deleteNotice(where: NoticeWhereUniqueInput!): Notice
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteManyNotices(where: NoticeWhereInput): BatchPayload!
  deleteManyRoutes(where: RouteWhereInput): BatchPayload!
  singleUpload(file: Upload!): File
  multipleUpload(files: [Upload!]!): [File!]
  createSmsMessageProcessor(data: SmsMessageCreateInput!): SmsMessageResponse!
  createSmsProviderProcessor(data: SmsProviderCreateInput!): SmsProviderResponse!
  updateSmsProviderProcessor(data: SmsProviderUpdateInput!, where: SmsProviderWhereUniqueInput!): SmsProviderResponse!
  signup(data: UserCreateInput!): AuthPayload!
  signin(where: UserWhereUniqueInput!, data: SigninDataInput!): AuthPayload!
  createUserProcessor(data: UserCreateInput!): UserResponse!
  updateUserProcessor(where: UserWhereUniqueInput, data: UserUpdateInput!): UserResponse!
  resetPasswordProcessor(data: ResetPasswordInput!, where: UserWhereUniqueInput!): AuthPayload!
  createResetPasswordProcessor(data: ResetPasswordCreateInput!): ResetPasswordResponse!
  createResourceProcessor(data: ResourceCreateInput!): ResourceResponse!
  updateResourceProcessor(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): ResourceResponse!
  createChatRoomProcessor(data: ChatRoomCreateInput!): ChatRoomResponse!
  updateChatRoomProcessor(data: ChatRoomUpdateInput!, where: ChatRoomWhereUniqueInput!): ChatRoomResponse!
  inviteChatRoomProcessor(data: ChatRoomInviteInput!, where: ChatRoomWhereUniqueInput!): Boolean!
  joinChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  leaveChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  createChatMessageReadedProcessor(data: ChatMessageReadedCreateInput!): ChatMessageReadedResponse!
  createChatMessageProcessor(data: ChatMessageCreateInput!): ChatMessageResponse!
  updateChatMessageProcessor(data: ChatMessageUpdateInput!, where: ChatMessageWhereUniqueInput!): ChatMessageResponse!
  markAsReadedChatMessage(where: ChatMessageWhereUniqueInput!): Boolean!
  createEthContractSourceProcessor(data: EthContractSourceCreateInput!): EthContractSourceResponse!
  updateEthContractSourceProcessor(data: EthContractSourceUpdateInput!, where: EthContractSourceWhereUniqueInput!): EthContractSourceResponse!
  ethUnlockPersonalAccount(address: String!, password: String!, duration: Int): Boolean!
  createEthTransactionProcessor(data: EthTransactionCreateInput!): EthTransactionResponse!
  resetPassword(where: UserWhereUniqueInput!): Boolean!
  createCallRequestProcessor(data: CallRequestCreateInput!): CallRequestResponse!
  createRouteProcessor(data: RouteCreateInput!): RouteResponse!
  updateRouteProcessor(data: RouteUpdateInput!, where: RouteWhereUniqueInput!): RouteResponse!
  createTemplateProcessor(data: TemplateCreateInput!): TemplateResponse!
  updateTemplateProcessor(data: TemplateUpdateInput!, where: TemplateWhereUniqueInput!): TemplateResponse!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notice implements Node {
  id: ID!
  createdAt: DateTime!
  type: NoticeType!
  User(where: UserWhereInput): User!
  CreatedBy(where: UserWhereInput): User
  ChatMessage(where: ChatMessageWhereInput): ChatMessage
  ChatRoomInvitation(where: ChatRoomInvitationWhereInput): ChatRoomInvitation
}

"""A connection to a list of items."""
type NoticeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoticeEdge]!
  aggregate: AggregateNotice!
}

input NoticeCreateInput {
  type: NoticeType!
  User: UserCreateOneWithoutNoticesInput!
  CreatedBy: UserCreateOneInput
  ChatMessage: ChatMessageCreateOneInput
  ChatRoomInvitation: ChatRoomInvitationCreateOneWithoutNoticeInput
}

input NoticeCreateManyWithoutUserInput {
  connect: [NoticeWhereUniqueInput!]
}

input NoticeCreateOneWithoutChatRoomInvitationInput {
  connect: NoticeWhereUniqueInput
}

input NoticeCreateWithoutChatRoomInvitationInput {
  type: NoticeType!
  User: UserCreateOneWithoutNoticesInput!
  CreatedBy: UserCreateOneInput
  ChatMessage: ChatMessageCreateOneInput
}

input NoticeCreateWithoutUserInput {
  type: NoticeType!
  CreatedBy: UserCreateOneInput
  ChatMessage: ChatMessageCreateOneInput
  ChatRoomInvitation: ChatRoomInvitationCreateOneWithoutNoticeInput
}

"""An edge in a connection."""
type NoticeEdge {
  """The item at the end of the edge."""
  node: Notice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoticeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NoticePreviousValues {
  id: ID!
  createdAt: DateTime!
  type: NoticeType!
}

type NoticeSubscriptionPayload {
  mutation: MutationType!
  node: Notice
  updatedFields: [String!]
  previousValues: NoticePreviousValues
}

input NoticeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoticeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoticeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoticeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoticeWhereInput
}

enum NoticeType {
  ChatMessage
  Call
  CallRequest
  ChatRoomInvitation
}

input NoticeUpdateInput {
  type: NoticeType
  User: UserUpdateOneWithoutNoticesInput
  CreatedBy: UserUpdateOneInput
  ChatMessage: ChatMessageUpdateOneInput
  ChatRoomInvitation: ChatRoomInvitationUpdateOneWithoutNoticeInput
}

input NoticeUpdateManyWithoutUserInput {
  connect: [NoticeWhereUniqueInput!]
  disconnect: [NoticeWhereUniqueInput!]
}

input NoticeUpdateOneWithoutChatRoomInvitationInput {
  connect: NoticeWhereUniqueInput
  disconnect: Boolean
}

input NoticeUpdateWithoutChatRoomInvitationDataInput {
  type: NoticeType
  User: UserUpdateOneWithoutNoticesInput
  CreatedBy: UserUpdateOneInput
  ChatMessage: ChatMessageUpdateOneInput
}

input NoticeUpdateWithoutUserDataInput {
  type: NoticeType
  CreatedBy: UserUpdateOneInput
  ChatMessage: ChatMessageUpdateOneInput
  ChatRoomInvitation: ChatRoomInvitationUpdateOneWithoutNoticeInput
}

input NoticeUpdateWithWhereUniqueWithoutUserInput {
  where: NoticeWhereUniqueInput!
  data: NoticeUpdateWithoutUserDataInput!
}

input NoticeUpsertWithWhereUniqueWithoutUserInput {
  where: NoticeWhereUniqueInput!
}

input NoticeWhereInput {
  """Logical AND on all given filters."""
  AND: [NoticeWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoticeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoticeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: NoticeType

  """All values that are not equal to given value."""
  type_not: NoticeType

  """All values that are contained in given list."""
  type_in: [NoticeType!]

  """All values that are not contained in given list."""
  type_not_in: [NoticeType!]
  User: UserWhereInput
  CreatedBy: UserWhereInput
  ChatMessage: ChatMessageWhereInput
  ChatRoomInvitation: ChatRoomInvitationWhereInput
}

input NoticeWhereUniqueInput {
  id: ID
}

type NotificationType implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: ID
  comment: String
  Users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type NotificationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationTypeEdge]!
  aggregate: AggregateNotificationType!
}

input NotificationTypeCreateInput {
  name: String!
  code: ID
  comment: String
  Users: UserCreateManyWithoutNotificationTypesInput
  CreatedBy: UserCreateOneWithoutNotificationTypesCreatedInput!
}

input NotificationTypeCreateManyWithoutCreatedByInput {
  connect: [NotificationTypeWhereUniqueInput!]
}

input NotificationTypeCreateManyWithoutUsersInput {
  connect: [NotificationTypeWhereUniqueInput!]
}

input NotificationTypeCreateWithoutCreatedByInput {
  name: String!
  code: ID
  comment: String
  Users: UserCreateManyWithoutNotificationTypesInput
}

input NotificationTypeCreateWithoutUsersInput {
  name: String!
  code: ID
  comment: String
  CreatedBy: UserCreateOneWithoutNotificationTypesCreatedInput!
}

"""An edge in a connection."""
type NotificationTypeEdge {
  """The item at the end of the edge."""
  node: NotificationType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationTypeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  comment_ASC
  comment_DESC
}

type NotificationTypePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: ID
  comment: String
}

type NotificationTypeSubscriptionPayload {
  mutation: MutationType!
  node: NotificationType
  updatedFields: [String!]
  previousValues: NotificationTypePreviousValues
}

input NotificationTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationTypeWhereInput
}

input NotificationTypeUpdateInput {
  name: String
  code: ID
  comment: String
  Users: UserUpdateManyWithoutNotificationTypesInput
  CreatedBy: UserUpdateOneWithoutNotificationTypesCreatedInput
}

input NotificationTypeUpdateManyWithoutCreatedByInput {
  connect: [NotificationTypeWhereUniqueInput!]
  disconnect: [NotificationTypeWhereUniqueInput!]
}

input NotificationTypeUpdateManyWithoutUsersInput {
  connect: [NotificationTypeWhereUniqueInput!]
  disconnect: [NotificationTypeWhereUniqueInput!]
}

input NotificationTypeUpdateWithoutCreatedByDataInput {
  name: String
  code: ID
  comment: String
  Users: UserUpdateManyWithoutNotificationTypesInput
}

input NotificationTypeUpdateWithoutUsersDataInput {
  name: String
  code: ID
  comment: String
  CreatedBy: UserUpdateOneWithoutNotificationTypesCreatedInput
}

input NotificationTypeUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NotificationTypeWhereUniqueInput!
  data: NotificationTypeUpdateWithoutCreatedByDataInput!
}

input NotificationTypeUpdateWithWhereUniqueWithoutUsersInput {
  where: NotificationTypeWhereUniqueInput!
  data: NotificationTypeUpdateWithoutUsersDataInput!
}

input NotificationTypeUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NotificationTypeWhereUniqueInput!
}

input NotificationTypeUpsertWithWhereUniqueWithoutUsersInput {
  where: NotificationTypeWhereUniqueInput!
}

input NotificationTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  Users_every: UserWhereInput
  Users_some: UserWhereInput
  Users_none: UserWhereInput
  CreatedBy: UserWhereInput
}

input NotificationTypeWhereUniqueInput {
  id: ID
  name: String
  code: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  userGroups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup]!
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom]!
  notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice]!
  notificationTypes(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType]!
  resourceTags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  ethAccounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount]!
  ethTransactions(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthTransaction]!
  callRequests(where: CallRequestWhereInput, orderBy: CallRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CallRequest]!
  routes(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Route]!
  ethContractSources(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthContractSource]!
  templates(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  chatMessages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage]!
  resource(where: ResourceWhereUniqueInput!): Resource
  chatMessageReaded(where: ChatMessageReadedWhereUniqueInput!): ChatMessageReaded
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  notice(where: NoticeWhereUniqueInput!): Notice
  notificationType(where: NotificationTypeWhereUniqueInput!): NotificationType
  resourceTag(where: ResourceTagWhereUniqueInput!): ResourceTag
  tag(where: TagWhereUniqueInput!): Tag
  vote(where: VoteWhereUniqueInput!): Vote
  ethAccount(where: EthAccountWhereUniqueInput!): EthAccount
  ethTransaction(where: EthTransactionWhereUniqueInput!): EthTransaction
  route(where: RouteWhereUniqueInput!): Route
  ethContractSource(where: EthContractSourceWhereUniqueInput!): EthContractSource
  template(where: TemplateWhereUniqueInput!): Template
  user(where: UserWhereUniqueInput!): User
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  chatMessageReadedsConnection(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatMessageReadedConnection!
  chatRoomsConnection(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatRoomConnection!
  noticesConnection(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoticeConnection!
  notificationTypesConnection(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationTypeConnection!
  resourceTagsConnection(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceTagConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  ethAccountsConnection(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthAccountConnection!
  ethTransactionsConnection(where: EthTransactionWhereInput, orderBy: EthTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthTransactionConnection!
  callRequestsConnection(where: CallRequestWhereInput, orderBy: CallRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CallRequestConnection!
  routesConnection(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RouteConnection!
  ethContractSourcesConnection(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthContractSourceConnection!
  templatesConnection(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TemplateConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  chatMessagesConnection(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatMessageConnection!
  me: User
  ethNet: ethNet!
  ethCoinbase: EthAccount
  ethPersonalAccounts(where: Boolean): [EthPersonalAccount!]!
  ethBalance(address: String!, convert: EthAmountConvert): Float
  ethTransactionCount(address: String!): Int!
  ethSyncState: ethSyncState
}

type ResetPassword implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: ID
  password: String
  validTill: DateTime
  User(where: UserWhereInput): User
}

"""A connection to a list of items."""
type ResetPasswordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResetPasswordEdge]!
  aggregate: AggregateResetPassword!
}

input ResetPasswordCreateInput {
  code: ID
  password: String
  validTill: DateTime
  User: UserCreateOneInput
}

"""An edge in a connection."""
type ResetPasswordEdge {
  """The item at the end of the edge."""
  node: ResetPassword!

  """A cursor for use in pagination."""
  cursor: String!
}

input ResetPasswordInput {
  code: ID!
}

enum ResetPasswordOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  code_ASC
  code_DESC
  password_ASC
  password_DESC
  validTill_ASC
  validTill_DESC
}

type ResetPasswordPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: ID
  password: String
  validTill: DateTime
}

type ResetPasswordResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: ResetPassword
}

type ResetPasswordSubscriptionPayload {
  mutation: MutationType!
  node: ResetPassword
  updatedFields: [String!]
  previousValues: ResetPasswordPreviousValues
}

input ResetPasswordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResetPasswordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResetPasswordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResetPasswordSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResetPasswordWhereInput
}

input ResetPasswordUpdateInput {
  code: ID
  password: String
  validTill: DateTime
  User: UserUpdateOneInput
}

input ResetPasswordWhereInput {
  """Logical AND on all given filters."""
  AND: [ResetPasswordWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResetPasswordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResetPasswordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  validTill: DateTime

  """All values that are not equal to given value."""
  validTill_not: DateTime

  """All values that are contained in given list."""
  validTill_in: [DateTime!]

  """All values that are not contained in given list."""
  validTill_not_in: [DateTime!]

  """All values less than the given value."""
  validTill_lt: DateTime

  """All values less than or equal the given value."""
  validTill_lte: DateTime

  """All values greater than the given value."""
  validTill_gt: DateTime

  """All values greater than or equal the given value."""
  validTill_gte: DateTime
  User: UserWhereInput
}

input ResetPasswordWhereUniqueInput {
  id: ID
  code: ID
}

type Resource implements Node {
  id: ID!
  code: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean!
  deleted: Boolean!
  hidemenu: Boolean!
  searchable: Boolean!
  uri: String
  isfolder: Boolean!
  CreatedBy(where: UserWhereInput): User!
  Parent(where: ResourceWhereInput): Resource
  Childs(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Image(where: FileWhereInput): File
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CommentTarget(where: ResourceWhereInput): Resource
  Comments(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  Tags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
}

"""A connection to a list of items."""
type ResourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateInput {
  type: ResourceType
  code: ID
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateManyWithoutCommentTargetInput {
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateManyWithoutCreatedByInput {
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateManyWithoutParentInput {
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateOneWithoutChildsInput {
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutCommentsInput {
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutImageInput {
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutTagsInput {
  connect: ResourceWhereUniqueInput
}

input ResourceCreateOneWithoutVotesInput {
  connect: ResourceWhereUniqueInput
}

input ResourceCreateWithoutChildsInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutCommentsInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutCommentTargetInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutCreatedByInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutImageInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutParentInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

input ResourceCreateWithoutTagsInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Votes: VoteCreateManyWithoutResourceInput
}

input ResourceCreateWithoutVotesInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserCreateOneWithoutResourcesInput!
  Parent: ResourceCreateOneWithoutChildsInput
  Childs: ResourceCreateManyWithoutParentInput
  Image: FileCreateOneWithoutImageResourceInput
  CommentTarget: ResourceCreateOneWithoutCommentsInput
  Comments: ResourceCreateManyWithoutCommentTargetInput
  Tags: ResourceTagCreateManyWithoutResourceInput
}

"""An edge in a connection."""
type ResourceEdge {
  """The item at the end of the edge."""
  node: Resource!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  longtitle_ASC
  longtitle_DESC
  content_ASC
  content_DESC
  contentText_ASC
  contentText_DESC
  published_ASC
  published_DESC
  deleted_ASC
  deleted_DESC
  hidemenu_ASC
  hidemenu_DESC
  searchable_ASC
  searchable_DESC
  uri_ASC
  uri_DESC
  isfolder_ASC
  isfolder_DESC
  rating_ASC
  rating_DESC
  positiveVotesCount_ASC
  positiveVotesCount_DESC
  negativeVotesCount_ASC
  negativeVotesCount_DESC
  neutralVotesCount_ASC
  neutralVotesCount_DESC
}

type ResourcePreviousValues {
  id: ID!
  code: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean!
  deleted: Boolean!
  hidemenu: Boolean!
  searchable: Boolean!
  uri: String
  isfolder: Boolean!
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
}

type ResourceResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Resource
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
}

type ResourceTag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: TagStatus!
  Resource(where: ResourceWhereInput): Resource!
  Tag(where: TagWhereInput): Tag!
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ResourceTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceTagEdge]!
  aggregate: AggregateResourceTag!
}

input ResourceTagCreateInput {
  status: TagStatus
  Resource: ResourceCreateOneWithoutTagsInput!
  Tag: TagCreateOneWithoutResourcesInput!
  CreatedBy: UserCreateOneWithoutResourceTagsInput!
}

input ResourceTagCreateManyWithoutCreatedByInput {
  connect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagCreateManyWithoutResourceInput {
  connect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagCreateManyWithoutTagInput {
  connect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagCreateWithoutCreatedByInput {
  status: TagStatus
  Resource: ResourceCreateOneWithoutTagsInput!
  Tag: TagCreateOneWithoutResourcesInput!
}

input ResourceTagCreateWithoutResourceInput {
  status: TagStatus
  Tag: TagCreateOneWithoutResourcesInput!
  CreatedBy: UserCreateOneWithoutResourceTagsInput!
}

input ResourceTagCreateWithoutTagInput {
  status: TagStatus
  Resource: ResourceCreateOneWithoutTagsInput!
  CreatedBy: UserCreateOneWithoutResourceTagsInput!
}

"""An edge in a connection."""
type ResourceTagEdge {
  """The item at the end of the edge."""
  node: ResourceTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResourceTagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type ResourceTagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: TagStatus!
}

type ResourceTagSubscriptionPayload {
  mutation: MutationType!
  node: ResourceTag
  updatedFields: [String!]
  previousValues: ResourceTagPreviousValues
}

input ResourceTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceTagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResourceTagWhereInput
}

input ResourceTagUpdateInput {
  status: TagStatus
  Resource: ResourceUpdateOneWithoutTagsInput
  Tag: TagUpdateOneWithoutResourcesInput
  CreatedBy: UserUpdateOneWithoutResourceTagsInput
}

input ResourceTagUpdateManyWithoutCreatedByInput {
  connect: [ResourceTagWhereUniqueInput!]
  disconnect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagUpdateManyWithoutResourceInput {
  connect: [ResourceTagWhereUniqueInput!]
  disconnect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagUpdateManyWithoutTagInput {
  connect: [ResourceTagWhereUniqueInput!]
  disconnect: [ResourceTagWhereUniqueInput!]
}

input ResourceTagUpdateWithoutCreatedByDataInput {
  status: TagStatus
  Resource: ResourceUpdateOneWithoutTagsInput
  Tag: TagUpdateOneWithoutResourcesInput
}

input ResourceTagUpdateWithoutResourceDataInput {
  status: TagStatus
  Tag: TagUpdateOneWithoutResourcesInput
  CreatedBy: UserUpdateOneWithoutResourceTagsInput
}

input ResourceTagUpdateWithoutTagDataInput {
  status: TagStatus
  Resource: ResourceUpdateOneWithoutTagsInput
  CreatedBy: UserUpdateOneWithoutResourceTagsInput
}

input ResourceTagUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ResourceTagWhereUniqueInput!
  data: ResourceTagUpdateWithoutCreatedByDataInput!
}

input ResourceTagUpdateWithWhereUniqueWithoutResourceInput {
  where: ResourceTagWhereUniqueInput!
  data: ResourceTagUpdateWithoutResourceDataInput!
}

input ResourceTagUpdateWithWhereUniqueWithoutTagInput {
  where: ResourceTagWhereUniqueInput!
  data: ResourceTagUpdateWithoutTagDataInput!
}

input ResourceTagUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ResourceTagWhereUniqueInput!
}

input ResourceTagUpsertWithWhereUniqueWithoutResourceInput {
  where: ResourceTagWhereUniqueInput!
}

input ResourceTagUpsertWithWhereUniqueWithoutTagInput {
  where: ResourceTagWhereUniqueInput!
}

input ResourceTagWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceTagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: TagStatus

  """All values that are not equal to given value."""
  status_not: TagStatus

  """All values that are contained in given list."""
  status_in: [TagStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TagStatus!]
  Resource: ResourceWhereInput
  Tag: TagWhereInput
  CreatedBy: UserWhereInput
}

input ResourceTagWhereUniqueInput {
  id: ID
}

enum ResourceType {
  Resource
  Blog
  Topic
  Comment
}

input ResourceUpdateInput {
  type: ResourceType
  code: ID
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateManyWithoutCommentTargetInput {
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
}

input ResourceUpdateManyWithoutCreatedByInput {
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
}

input ResourceUpdateManyWithoutParentInput {
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
}

input ResourceUpdateOneWithoutChildsInput {
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
}

input ResourceUpdateOneWithoutCommentsInput {
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
}

input ResourceUpdateOneWithoutImageInput {
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
}

input ResourceUpdateOneWithoutTagsInput {
  connect: ResourceWhereUniqueInput
}

input ResourceUpdateOneWithoutVotesInput {
  connect: ResourceWhereUniqueInput
}

input ResourceUpdateWithoutChildsDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutCommentsDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutCommentTargetDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutCreatedByDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutImageDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutParentDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutTagsDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Votes: VoteUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutVotesDataInput {
  code: ID
  type: ResourceType
  name: String
  longtitle: String
  content: Json
  contentText: String
  published: Boolean
  deleted: Boolean
  hidemenu: Boolean
  searchable: Boolean
  uri: String
  isfolder: Boolean
  rating: Float
  positiveVotesCount: Int
  negativeVotesCount: Int
  neutralVotesCount: Int
  CreatedBy: UserUpdateOneWithoutResourcesInput
  Parent: ResourceUpdateOneWithoutChildsInput
  Childs: ResourceUpdateManyWithoutParentInput
  Image: FileUpdateOneWithoutImageResourceInput
  CommentTarget: ResourceUpdateOneWithoutCommentsInput
  Comments: ResourceUpdateManyWithoutCommentTargetInput
  Tags: ResourceTagUpdateManyWithoutResourceInput
}

input ResourceUpdateWithWhereUniqueWithoutCommentTargetInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutCommentTargetDataInput!
}

input ResourceUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutCreatedByDataInput!
}

input ResourceUpdateWithWhereUniqueWithoutParentInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutParentDataInput!
}

input ResourceUpsertWithWhereUniqueWithoutCommentTargetInput {
  where: ResourceWhereUniqueInput!
}

input ResourceUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ResourceWhereUniqueInput!
}

input ResourceUpsertWithWhereUniqueWithoutParentInput {
  where: ResourceWhereUniqueInput!
}

input ResourceWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: ID

  """All values that are not equal to given value."""
  code_not: ID

  """All values that are contained in given list."""
  code_in: [ID!]

  """All values that are not contained in given list."""
  code_not_in: [ID!]

  """All values less than the given value."""
  code_lt: ID

  """All values less than or equal the given value."""
  code_lte: ID

  """All values greater than the given value."""
  code_gt: ID

  """All values greater than or equal the given value."""
  code_gte: ID

  """All values containing the given string."""
  code_contains: ID

  """All values not containing the given string."""
  code_not_contains: ID

  """All values starting with the given string."""
  code_starts_with: ID

  """All values not starting with the given string."""
  code_not_starts_with: ID

  """All values ending with the given string."""
  code_ends_with: ID

  """All values not ending with the given string."""
  code_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: ResourceType

  """All values that are not equal to given value."""
  type_not: ResourceType

  """All values that are contained in given list."""
  type_in: [ResourceType!]

  """All values that are not contained in given list."""
  type_not_in: [ResourceType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  longtitle: String

  """All values that are not equal to given value."""
  longtitle_not: String

  """All values that are contained in given list."""
  longtitle_in: [String!]

  """All values that are not contained in given list."""
  longtitle_not_in: [String!]

  """All values less than the given value."""
  longtitle_lt: String

  """All values less than or equal the given value."""
  longtitle_lte: String

  """All values greater than the given value."""
  longtitle_gt: String

  """All values greater than or equal the given value."""
  longtitle_gte: String

  """All values containing the given string."""
  longtitle_contains: String

  """All values not containing the given string."""
  longtitle_not_contains: String

  """All values starting with the given string."""
  longtitle_starts_with: String

  """All values not starting with the given string."""
  longtitle_not_starts_with: String

  """All values ending with the given string."""
  longtitle_ends_with: String

  """All values not ending with the given string."""
  longtitle_not_ends_with: String
  contentText: String

  """All values that are not equal to given value."""
  contentText_not: String

  """All values that are contained in given list."""
  contentText_in: [String!]

  """All values that are not contained in given list."""
  contentText_not_in: [String!]

  """All values less than the given value."""
  contentText_lt: String

  """All values less than or equal the given value."""
  contentText_lte: String

  """All values greater than the given value."""
  contentText_gt: String

  """All values greater than or equal the given value."""
  contentText_gte: String

  """All values containing the given string."""
  contentText_contains: String

  """All values not containing the given string."""
  contentText_not_contains: String

  """All values starting with the given string."""
  contentText_starts_with: String

  """All values not starting with the given string."""
  contentText_not_starts_with: String

  """All values ending with the given string."""
  contentText_ends_with: String

  """All values not ending with the given string."""
  contentText_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  hidemenu: Boolean

  """All values that are not equal to given value."""
  hidemenu_not: Boolean
  searchable: Boolean

  """All values that are not equal to given value."""
  searchable_not: Boolean
  uri: String

  """All values that are not equal to given value."""
  uri_not: String

  """All values that are contained in given list."""
  uri_in: [String!]

  """All values that are not contained in given list."""
  uri_not_in: [String!]

  """All values less than the given value."""
  uri_lt: String

  """All values less than or equal the given value."""
  uri_lte: String

  """All values greater than the given value."""
  uri_gt: String

  """All values greater than or equal the given value."""
  uri_gte: String

  """All values containing the given string."""
  uri_contains: String

  """All values not containing the given string."""
  uri_not_contains: String

  """All values starting with the given string."""
  uri_starts_with: String

  """All values not starting with the given string."""
  uri_not_starts_with: String

  """All values ending with the given string."""
  uri_ends_with: String

  """All values not ending with the given string."""
  uri_not_ends_with: String
  isfolder: Boolean

  """All values that are not equal to given value."""
  isfolder_not: Boolean
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  positiveVotesCount: Int

  """All values that are not equal to given value."""
  positiveVotesCount_not: Int

  """All values that are contained in given list."""
  positiveVotesCount_in: [Int!]

  """All values that are not contained in given list."""
  positiveVotesCount_not_in: [Int!]

  """All values less than the given value."""
  positiveVotesCount_lt: Int

  """All values less than or equal the given value."""
  positiveVotesCount_lte: Int

  """All values greater than the given value."""
  positiveVotesCount_gt: Int

  """All values greater than or equal the given value."""
  positiveVotesCount_gte: Int
  negativeVotesCount: Int

  """All values that are not equal to given value."""
  negativeVotesCount_not: Int

  """All values that are contained in given list."""
  negativeVotesCount_in: [Int!]

  """All values that are not contained in given list."""
  negativeVotesCount_not_in: [Int!]

  """All values less than the given value."""
  negativeVotesCount_lt: Int

  """All values less than or equal the given value."""
  negativeVotesCount_lte: Int

  """All values greater than the given value."""
  negativeVotesCount_gt: Int

  """All values greater than or equal the given value."""
  negativeVotesCount_gte: Int
  neutralVotesCount: Int

  """All values that are not equal to given value."""
  neutralVotesCount_not: Int

  """All values that are contained in given list."""
  neutralVotesCount_in: [Int!]

  """All values that are not contained in given list."""
  neutralVotesCount_not_in: [Int!]

  """All values less than the given value."""
  neutralVotesCount_lt: Int

  """All values less than or equal the given value."""
  neutralVotesCount_lte: Int

  """All values greater than the given value."""
  neutralVotesCount_gt: Int

  """All values greater than or equal the given value."""
  neutralVotesCount_gte: Int
  CreatedBy: UserWhereInput
  Parent: ResourceWhereInput
  Childs_every: ResourceWhereInput
  Childs_some: ResourceWhereInput
  Childs_none: ResourceWhereInput
  Image: FileWhereInput
  CommentTarget: ResourceWhereInput
  Comments_every: ResourceWhereInput
  Comments_some: ResourceWhereInput
  Comments_none: ResourceWhereInput
  Votes_every: VoteWhereInput
  Votes_some: VoteWhereInput
  Votes_none: VoteWhereInput
  Tags_every: ResourceTagWhereInput
  Tags_some: ResourceTagWhereInput
  Tags_none: ResourceTagWhereInput
}

input ResourceWhereUniqueInput {
  id: ID
  code: ID
  uri: String
}

type Route implements Node {
  id: ID!
  name: String
  path: String!
  exact: Boolean!
  component: String!
  Parent(where: RouteWhereInput): Route
  Childs(where: RouteWhereInput, orderBy: RouteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Route!]
  CreatedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type RouteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RouteEdge]!
  aggregate: AggregateRoute!
}

input RouteCreateInput {
  name: String
  path: String!
  exact: Boolean
  component: String!
  Parent: RouteCreateOneWithoutChildsInput
  Childs: RouteCreateManyWithoutParentInput
  CreatedBy: UserCreateOneInput
}

input RouteCreateManyWithoutParentInput {
  connect: [RouteWhereUniqueInput!]
}

input RouteCreateOneWithoutChildsInput {
  connect: RouteWhereUniqueInput
}

input RouteCreateWithoutChildsInput {
  name: String
  path: String!
  exact: Boolean
  component: String!
  Parent: RouteCreateOneWithoutChildsInput
  CreatedBy: UserCreateOneInput
}

input RouteCreateWithoutParentInput {
  name: String
  path: String!
  exact: Boolean
  component: String!
  Childs: RouteCreateManyWithoutParentInput
  CreatedBy: UserCreateOneInput
}

"""An edge in a connection."""
type RouteEdge {
  """The item at the end of the edge."""
  node: Route!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RouteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  path_ASC
  path_DESC
  exact_ASC
  exact_DESC
  component_ASC
  component_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoutePreviousValues {
  id: ID!
  name: String
  path: String!
  exact: Boolean!
  component: String!
}

type RouteResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Route
}

type RouteSubscriptionPayload {
  mutation: MutationType!
  node: Route
  updatedFields: [String!]
  previousValues: RoutePreviousValues
}

input RouteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RouteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RouteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RouteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RouteWhereInput
}

input RouteUpdateInput {
  name: String
  path: String
  exact: Boolean
  component: String
  Parent: RouteUpdateOneWithoutChildsInput
  Childs: RouteUpdateManyWithoutParentInput
  CreatedBy: UserUpdateOneInput
}

input RouteUpdateManyWithoutParentInput {
  connect: [RouteWhereUniqueInput!]
  disconnect: [RouteWhereUniqueInput!]
}

input RouteUpdateOneWithoutChildsInput {
  connect: RouteWhereUniqueInput
  disconnect: Boolean
}

input RouteUpdateWithoutChildsDataInput {
  name: String
  path: String
  exact: Boolean
  component: String
  Parent: RouteUpdateOneWithoutChildsInput
  CreatedBy: UserUpdateOneInput
}

input RouteUpdateWithoutParentDataInput {
  name: String
  path: String
  exact: Boolean
  component: String
  Childs: RouteUpdateManyWithoutParentInput
  CreatedBy: UserUpdateOneInput
}

input RouteUpdateWithWhereUniqueWithoutParentInput {
  where: RouteWhereUniqueInput!
  data: RouteUpdateWithoutParentDataInput!
}

input RouteUpsertWithWhereUniqueWithoutParentInput {
  where: RouteWhereUniqueInput!
}

input RouteWhereInput {
  """Logical AND on all given filters."""
  AND: [RouteWhereInput!]

  """Logical OR on all given filters."""
  OR: [RouteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RouteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  exact: Boolean

  """All values that are not equal to given value."""
  exact_not: Boolean
  component: String

  """All values that are not equal to given value."""
  component_not: String

  """All values that are contained in given list."""
  component_in: [String!]

  """All values that are not contained in given list."""
  component_not_in: [String!]

  """All values less than the given value."""
  component_lt: String

  """All values less than or equal the given value."""
  component_lte: String

  """All values greater than the given value."""
  component_gt: String

  """All values greater than or equal the given value."""
  component_gte: String

  """All values containing the given string."""
  component_contains: String

  """All values not containing the given string."""
  component_not_contains: String

  """All values starting with the given string."""
  component_starts_with: String

  """All values not starting with the given string."""
  component_not_starts_with: String

  """All values ending with the given string."""
  component_ends_with: String

  """All values not ending with the given string."""
  component_not_ends_with: String
  Parent: RouteWhereInput
  Childs_every: RouteWhereInput
  Childs_some: RouteWhereInput
  Childs_none: RouteWhereInput
  CreatedBy: UserWhereInput
}

input RouteWhereUniqueInput {
  id: ID
  path: String
}

input SigninDataInput {
  password: String!
}

type SmsMessage implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  from: String!
  text: String!
  recipients: [String!]!
  Provider(where: SmsProviderWhereInput): SmsProvider!
  deletOnSend: Boolean
  CreatedBy(where: UserWhereInput): User
  Status(where: LetsadsSmsMessageStatusWhereInput): LetsadsSmsMessageStatus
}

"""A connection to a list of items."""
type SmsMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SmsMessageEdge]!
  aggregate: AggregateSmsMessage!
}

input SmsMessageCreateInput {
  from: String!
  text: String!
  deletOnSend: Boolean
  recipients: SmsMessageCreaterecipientsInput
  Provider: SmsProviderCreateOneInput!
  CreatedBy: UserCreateOneInput
  Status: LetsadsSmsMessageStatusCreateOneWithoutSmsMessageInput
}

input SmsMessageCreateOneWithoutStatusInput {
  connect: SmsMessageWhereUniqueInput
}

input SmsMessageCreaterecipientsInput {
  set: [String!]
}

input SmsMessageCreateWithoutStatusInput {
  from: String!
  text: String!
  deletOnSend: Boolean
  recipients: SmsMessageCreaterecipientsInput
  Provider: SmsProviderCreateOneInput!
  CreatedBy: UserCreateOneInput
}

"""An edge in a connection."""
type SmsMessageEdge {
  """The item at the end of the edge."""
  node: SmsMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SmsMessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  from_ASC
  from_DESC
  text_ASC
  text_DESC
  deletOnSend_ASC
  deletOnSend_DESC
}

type SmsMessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  from: String!
  text: String!
  recipients: [String!]!
  deletOnSend: Boolean
}

type SmsMessageResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: SmsMessage
}

type SmsMessageSubscriptionPayload {
  mutation: MutationType!
  node: SmsMessage
  updatedFields: [String!]
  previousValues: SmsMessagePreviousValues
}

input SmsMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsMessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SmsMessageWhereInput
}

input SmsMessageUpdateInput {
  from: String
  text: String
  deletOnSend: Boolean
  recipients: SmsMessageUpdaterecipientsInput
  Provider: SmsProviderUpdateOneInput
  CreatedBy: UserUpdateOneInput
  Status: LetsadsSmsMessageStatusUpdateOneWithoutSmsMessageInput
}

input SmsMessageUpdateOneWithoutStatusInput {
  connect: SmsMessageWhereUniqueInput
}

input SmsMessageUpdaterecipientsInput {
  set: [String!]
}

input SmsMessageUpdateWithoutStatusDataInput {
  from: String
  text: String
  deletOnSend: Boolean
  recipients: SmsMessageUpdaterecipientsInput
  Provider: SmsProviderUpdateOneInput
  CreatedBy: UserUpdateOneInput
}

input SmsMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  from: String

  """All values that are not equal to given value."""
  from_not: String

  """All values that are contained in given list."""
  from_in: [String!]

  """All values that are not contained in given list."""
  from_not_in: [String!]

  """All values less than the given value."""
  from_lt: String

  """All values less than or equal the given value."""
  from_lte: String

  """All values greater than the given value."""
  from_gt: String

  """All values greater than or equal the given value."""
  from_gte: String

  """All values containing the given string."""
  from_contains: String

  """All values not containing the given string."""
  from_not_contains: String

  """All values starting with the given string."""
  from_starts_with: String

  """All values not starting with the given string."""
  from_not_starts_with: String

  """All values ending with the given string."""
  from_ends_with: String

  """All values not ending with the given string."""
  from_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  deletOnSend: Boolean

  """All values that are not equal to given value."""
  deletOnSend_not: Boolean
  Provider: SmsProviderWhereInput
  CreatedBy: UserWhereInput
  Status: LetsadsSmsMessageStatusWhereInput
}

input SmsMessageWhereUniqueInput {
  id: ID
}

type SmsProvider implements Node {
  id: ID!
  name: String!
  credentials: Json
  CreatedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type SmsProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SmsProviderEdge]!
  aggregate: AggregateSmsProvider!
}

input SmsProviderCreateInput {
  name: String!
  credentials: Json
  CreatedBy: UserCreateOneInput
}

input SmsProviderCreateOneInput {
  connect: SmsProviderWhereUniqueInput
}

"""An edge in a connection."""
type SmsProviderEdge {
  """The item at the end of the edge."""
  node: SmsProvider!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SmsProviderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  credentials_ASC
  credentials_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SmsProviderPreviousValues {
  id: ID!
  name: String!
  credentials: Json
}

type SmsProviderResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: SmsProvider
}

type SmsProviderSubscriptionPayload {
  mutation: MutationType!
  node: SmsProvider
  updatedFields: [String!]
  previousValues: SmsProviderPreviousValues
}

input SmsProviderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsProviderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsProviderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsProviderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SmsProviderWhereInput
}

input SmsProviderUpdateDataInput {
  name: String
  credentials: Json
  CreatedBy: UserUpdateOneInput
}

input SmsProviderUpdateInput {
  name: String
  credentials: Json
  CreatedBy: UserUpdateOneInput
}

input SmsProviderUpdateOneInput {
  connect: SmsProviderWhereUniqueInput
}

input SmsProviderWhereInput {
  """Logical AND on all given filters."""
  AND: [SmsProviderWhereInput!]

  """Logical OR on all given filters."""
  OR: [SmsProviderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SmsProviderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  CreatedBy: UserWhereInput
}

input SmsProviderWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  chatMessageReaded(where: ChatMessageReadedSubscriptionWhereInput): ChatMessageReadedSubscriptionPayload
  chatRoom(where: ChatRoomSubscriptionWhereInput): ChatRoomSubscriptionPayload
  notice(where: NoticeSubscriptionWhereInput): NoticeSubscriptionPayload
  ethTransaction(where: EthTransactionSubscriptionWhereInput): EthTransactionSubscriptionPayload
  callRequest(where: CallRequestSubscriptionWhereInput): CallRequestSubscriptionPayload
  route(where: RouteSubscriptionWhereInput): RouteSubscriptionPayload
  template(where: TemplateSubscriptionWhereInput): TemplateSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  chatMessage(where: ChatMessageSubscriptionWhereInput): ChatMessageSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: TagStatus!
  Resources(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
  CreatedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  status: TagStatus
  Resources: ResourceTagCreateManyWithoutTagInput
  CreatedBy: UserCreateOneWithoutTagsInput!
}

input TagCreateManyWithoutCreatedByInput {
  connect: [TagWhereUniqueInput!]
}

input TagCreateOneWithoutResourcesInput {
  connect: TagWhereUniqueInput
}

input TagCreateWithoutCreatedByInput {
  name: String!
  status: TagStatus
  Resources: ResourceTagCreateManyWithoutTagInput
}

input TagCreateWithoutResourcesInput {
  name: String!
  status: TagStatus
  CreatedBy: UserCreateOneWithoutTagsInput!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
}

type TagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  status: TagStatus!
}

enum TagStatus {
  Active
  Moderated
  Blocked
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  name: String
  status: TagStatus
  Resources: ResourceTagUpdateManyWithoutTagInput
  CreatedBy: UserUpdateOneWithoutTagsInput
}

input TagUpdateManyWithoutCreatedByInput {
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
}

input TagUpdateOneWithoutResourcesInput {
  connect: TagWhereUniqueInput
}

input TagUpdateWithoutCreatedByDataInput {
  name: String
  status: TagStatus
  Resources: ResourceTagUpdateManyWithoutTagInput
}

input TagUpdateWithoutResourcesDataInput {
  name: String
  status: TagStatus
  CreatedBy: UserUpdateOneWithoutTagsInput
}

input TagUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutCreatedByDataInput!
}

input TagUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: TagStatus

  """All values that are not equal to given value."""
  status_not: TagStatus

  """All values that are contained in given list."""
  status_in: [TagStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TagStatus!]
  Resources_every: ResourceTagWhereInput
  Resources_some: ResourceTagWhereInput
  Resources_none: ResourceTagWhereInput
  CreatedBy: UserWhereInput
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type Template implements Node {
  id: ID!
  name: String!
  description: String
  props: Json!
  components: Json!
  rank: Int
  Parent(where: TemplateWhereInput): Template
  CreatedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type TemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TemplateEdge]!
  aggregate: AggregateTemplate!
}

input TemplateCreateInput {
  name: String!
  description: String
  props: Json!
  components: Json!
  rank: Int
  Parent: TemplateCreateOneInput
  CreatedBy: UserCreateOneInput
}

input TemplateCreateOneInput {
  connect: TemplateWhereUniqueInput
}

"""An edge in a connection."""
type TemplateEdge {
  """The item at the end of the edge."""
  node: Template!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  props_ASC
  props_DESC
  components_ASC
  components_DESC
  rank_ASC
  rank_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TemplatePreviousValues {
  id: ID!
  name: String!
  description: String
  props: Json!
  components: Json!
  rank: Int
}

type TemplateResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Template
}

type TemplateSubscriptionPayload {
  mutation: MutationType!
  node: Template
  updatedFields: [String!]
  previousValues: TemplatePreviousValues
}

input TemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TemplateWhereInput
}

input TemplateUpdateDataInput {
  name: String
  description: String
  props: Json
  components: Json
  rank: Int
  Parent: TemplateUpdateOneInput
  CreatedBy: UserUpdateOneInput
}

input TemplateUpdateInput {
  name: String
  description: String
  props: Json
  components: Json
  rank: Int
  Parent: TemplateUpdateOneInput
  CreatedBy: UserUpdateOneInput
}

input TemplateUpdateOneInput {
  connect: TemplateWhereUniqueInput
  disconnect: Boolean
}

input TemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  Parent: TemplateWhereInput
  CreatedBy: UserWhereInput
}

input TemplateWhereUniqueInput {
  id: ID
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  Groups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  CreatedUsers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User
  LogedIns(where: LogedInWhereInput, orderBy: LogedInOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogedIn!]
  Files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  hidden: Boolean
  Resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Rooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom!]
  CreatedRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom!]
  Messages(where: ChatMessageWhereInput, orderBy: ChatMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessage!]
  ReadedMessages(where: ChatMessageReadedWhereInput, orderBy: ChatMessageReadedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatMessageReaded!]
  Notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice!]
  Votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  NotificationTypes(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType!]
  NotificationTypesCreated(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType!]
  Tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  ResourceTags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
  EthContractSourcesCreated(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthContractSource!]
  EthAccounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount!]
  LettersCreated(where: LetterWhereInput, orderBy: LetterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Letter!]
  sudo: Boolean
  hasEmail: Boolean!
  hasPhone: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  email: String
  phone: String
  password: String
  fullname: String
  image: String
  address: String
}

input UserCreateManyWithoutCreatedByInput {
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutNotificationTypesInput {
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoomsInput {
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedRoomsInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedUsersInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEthAccountsInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFilesInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLettersCreatedInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLogedInsInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNoticesInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationTypesCreatedInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReadedMessagesInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResourcesInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResourceTagsInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTagsInput {
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedByInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutCreatedRoomsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutCreatedUsersInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutEthAccountsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutFilesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutGroupsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutLettersCreatedInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
}

input UserCreateWithoutLogedInsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutMessagesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutNoticesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutNotificationTypesCreatedInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutNotificationTypesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutReadedMessagesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutResourcesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutResourceTagsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutRoomsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutTagsInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  Votes: VoteCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupCreateManyWithoutUsersInput
  CreatedUsers: UserCreateManyWithoutCreatedByInput
  CreatedBy: UserCreateOneWithoutCreatedUsersInput
  LogedIns: LogedInCreateManyWithoutUserInput
  Files: FileCreateManyWithoutCreatedByInput
  Resources: ResourceCreateManyWithoutCreatedByInput
  Rooms: ChatRoomCreateManyWithoutMembersInput
  CreatedRooms: ChatRoomCreateManyWithoutCreatedByInput
  Messages: ChatMessageCreateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedCreateManyWithoutUserInput
  Notices: NoticeCreateManyWithoutUserInput
  NotificationTypes: NotificationTypeCreateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeCreateManyWithoutCreatedByInput
  Tags: TagCreateManyWithoutCreatedByInput
  ResourceTags: ResourceTagCreateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceCreateManyInput
  EthAccounts: EthAccountCreateManyWithoutCreatedByInput
  LettersCreated: LetterCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserGroup implements Node {
  id: ID!
  name: String!
  Users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type UserGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserGroupEdge]!
  aggregate: AggregateUserGroup!
}

input UserGroupCreateInput {
  name: String!
  Users: UserCreateManyWithoutGroupsInput
}

input UserGroupCreateManyWithoutUsersInput {
  connect: [UserGroupWhereUniqueInput!]
}

input UserGroupCreateWithoutUsersInput {
  name: String!
}

"""An edge in a connection."""
type UserGroupEdge {
  """The item at the end of the edge."""
  node: UserGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserGroupPreviousValues {
  id: ID!
  name: String!
}

type UserGroupSubscriptionPayload {
  mutation: MutationType!
  node: UserGroup
  updatedFields: [String!]
  previousValues: UserGroupPreviousValues
}

input UserGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserGroupWhereInput
}

input UserGroupUpdateInput {
  name: String
  Users: UserUpdateManyWithoutGroupsInput
}

input UserGroupUpdateManyWithoutUsersInput {
  connect: [UserGroupWhereUniqueInput!]
  disconnect: [UserGroupWhereUniqueInput!]
}

input UserGroupUpdateWithoutUsersDataInput {
  name: String
}

input UserGroupUpdateWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateWithoutUsersDataInput!
}

input UserGroupUpsertWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput!
}

input UserGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  Users_every: UserWhereInput
  Users_some: UserWhereInput
  Users_none: UserWhereInput
}

input UserGroupWhereUniqueInput {
  id: ID
  name: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  showEmail_ASC
  showEmail_DESC
  showPhone_ASC
  showPhone_DESC
  password_ASC
  password_DESC
  fullname_ASC
  fullname_DESC
  image_ASC
  image_DESC
  address_ASC
  address_DESC
  active_ASC
  active_DESC
  activated_ASC
  activated_DESC
  deleted_ASC
  deleted_DESC
  hidden_ASC
  hidden_DESC
  sudo_ASC
  sudo_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
}

type UserResponse {
  success: Boolean!
  message: String
  errors: [Error!]!
  data: User
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateInput {
  phone: String
  password: String
  fullname: String
  image: String
  address: String
  email: String
  ethWalletPK: String
  ethWalletPKSendEmail: Boolean
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutCreatedByInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
}

input UserUpdateManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
}

input UserUpdateManyWithoutNotificationTypesInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
}

input UserUpdateManyWithoutRoomsInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
}

input UserUpdateOneInput {
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateOneWithoutCreatedRoomsInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCreatedUsersInput {
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateOneWithoutEthAccountsInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutFilesInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLettersCreatedInput {
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateOneWithoutLogedInsInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateOneWithoutNoticesInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutNotificationTypesCreatedInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutReadedMessagesInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutResourcesInput {
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateOneWithoutResourceTagsInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTagsInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutVotesInput {
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedByDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutCreatedRoomsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutCreatedUsersDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutEthAccountsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutFilesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutGroupsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutLettersCreatedDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutLogedInsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutMessagesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutNoticesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotificationTypesCreatedDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotificationTypesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutReadedMessagesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutResourcesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutResourceTagsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutRoomsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutTagsDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  Votes: VoteUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  active: Boolean
  activated: Boolean
  deleted: Boolean
  hidden: Boolean
  sudo: Boolean
  Groups: UserGroupUpdateManyWithoutUsersInput
  CreatedUsers: UserUpdateManyWithoutCreatedByInput
  CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  LogedIns: LogedInUpdateManyWithoutUserInput
  Files: FileUpdateManyWithoutCreatedByInput
  Resources: ResourceUpdateManyWithoutCreatedByInput
  Rooms: ChatRoomUpdateManyWithoutMembersInput
  CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  Messages: ChatMessageUpdateManyWithoutCreatedByInput
  ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  Notices: NoticeUpdateManyWithoutUserInput
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  Tags: TagUpdateManyWithoutCreatedByInput
  ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  EthContractSourcesCreated: EthContractSourceUpdateManyInput
  EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCreatedByDataInput!
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithWhereUniqueWithoutNotificationTypesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNotificationTypesDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutNotificationTypesInput {
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  showEmail: Boolean

  """All values that are not equal to given value."""
  showEmail_not: Boolean
  showPhone: Boolean

  """All values that are not equal to given value."""
  showPhone_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  fullname: String

  """All values that are not equal to given value."""
  fullname_not: String

  """All values that are contained in given list."""
  fullname_in: [String!]

  """All values that are not contained in given list."""
  fullname_not_in: [String!]

  """All values less than the given value."""
  fullname_lt: String

  """All values less than or equal the given value."""
  fullname_lte: String

  """All values greater than the given value."""
  fullname_gt: String

  """All values greater than or equal the given value."""
  fullname_gte: String

  """All values containing the given string."""
  fullname_contains: String

  """All values not containing the given string."""
  fullname_not_contains: String

  """All values starting with the given string."""
  fullname_starts_with: String

  """All values not starting with the given string."""
  fullname_not_starts_with: String

  """All values ending with the given string."""
  fullname_ends_with: String

  """All values not ending with the given string."""
  fullname_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  activated: Boolean

  """All values that are not equal to given value."""
  activated_not: Boolean
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  hidden: Boolean

  """All values that are not equal to given value."""
  hidden_not: Boolean
  sudo: Boolean

  """All values that are not equal to given value."""
  sudo_not: Boolean
  Groups_every: UserGroupWhereInput
  Groups_some: UserGroupWhereInput
  Groups_none: UserGroupWhereInput
  CreatedUsers_every: UserWhereInput
  CreatedUsers_some: UserWhereInput
  CreatedUsers_none: UserWhereInput
  CreatedBy: UserWhereInput
  LogedIns_every: LogedInWhereInput
  LogedIns_some: LogedInWhereInput
  LogedIns_none: LogedInWhereInput
  Files_every: FileWhereInput
  Files_some: FileWhereInput
  Files_none: FileWhereInput
  Resources_every: ResourceWhereInput
  Resources_some: ResourceWhereInput
  Resources_none: ResourceWhereInput
  Rooms_every: ChatRoomWhereInput
  Rooms_some: ChatRoomWhereInput
  Rooms_none: ChatRoomWhereInput
  CreatedRooms_every: ChatRoomWhereInput
  CreatedRooms_some: ChatRoomWhereInput
  CreatedRooms_none: ChatRoomWhereInput
  Messages_every: ChatMessageWhereInput
  Messages_some: ChatMessageWhereInput
  Messages_none: ChatMessageWhereInput
  ReadedMessages_every: ChatMessageReadedWhereInput
  ReadedMessages_some: ChatMessageReadedWhereInput
  ReadedMessages_none: ChatMessageReadedWhereInput
  Notices_every: NoticeWhereInput
  Notices_some: NoticeWhereInput
  Notices_none: NoticeWhereInput
  Votes_every: VoteWhereInput
  Votes_some: VoteWhereInput
  Votes_none: VoteWhereInput
  NotificationTypes_every: NotificationTypeWhereInput
  NotificationTypes_some: NotificationTypeWhereInput
  NotificationTypes_none: NotificationTypeWhereInput
  NotificationTypesCreated_every: NotificationTypeWhereInput
  NotificationTypesCreated_some: NotificationTypeWhereInput
  NotificationTypesCreated_none: NotificationTypeWhereInput
  Tags_every: TagWhereInput
  Tags_some: TagWhereInput
  Tags_none: TagWhereInput
  ResourceTags_every: ResourceTagWhereInput
  ResourceTags_some: ResourceTagWhereInput
  ResourceTags_none: ResourceTagWhereInput
  EthContractSourcesCreated_every: EthContractSourceWhereInput
  EthContractSourcesCreated_some: EthContractSourceWhereInput
  EthContractSourcesCreated_none: EthContractSourceWhereInput
  EthAccounts_every: EthAccountWhereInput
  EthAccounts_some: EthAccountWhereInput
  EthAccounts_none: EthAccountWhereInput
  LettersCreated_every: LetterWhereInput
  LettersCreated_some: LetterWhereInput
  LettersCreated_none: LetterWhereInput
  search: String
  showHidden: Boolean
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

type Vote implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Resource(where: ResourceWhereInput): Resource!
  User(where: UserWhereInput): User!
  value: Float!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  value: Float!
  Resource: ResourceCreateOneWithoutVotesInput!
  User: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutResourceInput {
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutResourceInput {
  value: Float!
  User: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  value: Float!
  Resource: ResourceCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  value: Float!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  value: Float
  Resource: ResourceUpdateOneWithoutVotesInput
  User: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutResourceInput {
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
}

input VoteUpdateManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
}

input VoteUpdateWithoutResourceDataInput {
  value: Float
  User: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  value: Float
  Resource: ResourceUpdateOneWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutResourceInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutResourceDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutResourceInput {
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  Resource: ResourceWhereInput
  User: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
